
  -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+-
   NOTE: This file was automatically generated by `cvs2cl.pl'.  If you
   edit this file, your changes will be lost when someone next runs
   cvs2cl.pl.  See http://www.red-bean.com/~kfogel/cvs2cl.shtml for more.
  -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+- -+-

2003-06-10 18:15  mcoletti

	* doc/sdts++.texi: 
	Corrected some text to address the addition of two new modules.

2003-06-10 18:03  mcoletti

	* doc/sdts++.texi: 
	Added build instructions for using Boost bjam.

2003-06-10 17:46  mcoletti

	* sdts++/Jamfile: - Now include $(BOOST_ROOT) instead of
	$(BOOST_HEADERS) since the   latter was redundant
	
	- If building with gcc, force compilation as C++ when compiling
	bison	generated file that ends in ".c"
	
	- Define VECTOR_ITERATOR_POINTER_NOT_EQUIVALENT for gcc so that  
	sb_Accessor.cpp builds.

	* tests/sc_Subfield_t.cpp: - s/limits.c/climits/  ... i.e., more
	C++ ISO Standard compliant

	* sdts++/logical/sl_Chain.h: Synch ctor initializer order and
	member declaration order.

	* tests/Jamfile: - Replaced superfluous BOOT_HEADER with
	BOOST_ROOT.  - Now define HAVE_FLOAT_H so that sc_Subfield_t
	properly compiles for - g++

2003-06-10 16:24  mcoletti

	* Jamfile, Jamrules, Makefile.am, boost-build.jam,
	project-root.jam, Windows/sdtsxx/sdtsxx.dsp,
	Windows/sysutils/sysutils.dsp, sdts++/Jamfile, sdts++/Makefile.am,
	sysutils/Jamfile, sysutils/Makefile.am, tests/Jamfile,
	tests/Makefile.am, tests/sl_String_t.cpp: Added bjam files.

2003-06-10 15:38  mcoletti

	* TODO: Added item for replacing sysutils with boost file system
	package

2003-06-10 15:30  mcoletti

	* doc/sdts++.texi: Made some of the text easier to understand.

2003-06-10 00:45  mcoletti

	* TODO: Removed TODO items that had either been implemented, or
	became deprecated.

	* doc/sdts++.texi: - Complete reorganization of documentation. 
	Credits, bibliography,	 and support sections moved to end.
	
	- Added sections on builder and logical sub-systems.
	
	- Updated e-mail address.

2003-06-09 20:58  mcoletti

	* libtool: added libtool generated file

2003-06-06 21:30  mcoletti

	* Makefile, Makefile.in, aclocal.m4, config.guess, config.status,
	config.sub, configure, configure.in, depcomp, install-sh,
	ltmain.sh, mkinstalldirs, Windows/Makefile.in, contrib/Makefile.in,
	contrib/mkstat/Makefile.in, contrib/pr8211/Makefile.in,
	contrib/prsdts/Makefile.in, contrib/sdtsdem2xyz/Makefile.in,
	contrib/tomksdts/Makefile.in, doc/Makefile.in,
	sdts++/io/sio_Reader.cpp, sysutils/Makefile.in, sysutils/configure,
	sysutils/configure.in: Brought up to latest GNU autotool spec.	Cut
	out some dead code in sio_Reader.

2003-02-13 23:37  mcoletti

	* contrib/mksdts/Makefile.am, contrib/mksdts/Makefile.in,
	contrib/mksdts/aclocal.m4, contrib/mksdts/lexer.ll,
	contrib/mksdts/parser.yy, contrib/mkstat/emit.h,
	contrib/mkstat/filename.h, contrib/mkstat/mkstat.cpp,
	contrib/pr8211/pr8211.cpp, contrib/tomksdts/convert.h,
	contrib/tomksdts/tomksdts.cpp: Made g++ 3.2 compliant

2003-01-13 22:34  mcoletti

	* sdts++/Makefile.in: forced use of new type of Makfile

	* mkinstalldirs: forcing more multi-platform homogeniety

2003-01-13 22:23  mcoletti

	* sdts++/Makefile: Makefiles are always generated locally, and so
	should not be in CVS.

	* depcomp: synched

2003-01-13 22:00  mcoletti

	* sysutils/configure: synching

2003-01-13 21:56  mcoletti

	* tests/Makefile.in: synching

2003-01-13 21:48  mcoletti

	* Windows/Makefile.in, contrib/mkstat/Makefile.in,
	contrib/pr8211/Makefile.in, contrib/prsdts/Makefile.in,
	contrib/sdtsdem2xyz/Makefile.in, contrib/Makefile.in,
	contrib/tomksdts/Makefile.in, doc/Makefile.in,
	sysutils/Makefile.in: Even those these are generated via automake,
	it makes sense to have versions available via CVS since not all
	sites have access to the latest version of automake.

2003-01-13 21:12  mcoletti

	* compile, config.guess, config.status, missing: though these are
	generated via automake and libtool, it's best to have a consistent
	set, especially given that some of us apparently have broken work
	environments with inconsistent versions of those utilities

2003-01-13 20:55  mcoletti

	* config.sub, ltmain.sh: though these are generated via automake
	and libtool, it's best to have a consistent set, especially given
	that some of us apparently have broken work environments with
	inconsistent versions of those utilities

2003-01-03 20:41  mcoletti

	* Makefile, sdts++/container/sc_Field.h,
	sdts++/container/sc_Subfield.h: Minor changes

2002-12-04 21:31  mcoletti

	* tests/sio_8211DR_t.cpp: Added in some Electric Fence aware
	debugging code.

2002-12-04 21:17  mcoletti

	* tests/sh_Directory_t: \r's were screwing up the shell interpreter
	... removed

2002-12-04 20:45  mcoletti

	* tests/sb_Directory_t.cpp, tests/sh_Directory_t: Added wrapper
	script for sb_Directory test harnass and cleaned up usage message.

2002-12-04 19:28  mcoletti

	* Windows/all.dsw, Windows/getopt.dsp,
	Windows/container_t/container_t.dsp, Windows/prsdts/prsdts.dsp,
	Windows/sb_Directory_t/sb_Directory_t.dsp,
	Windows/sb_ForeignID_t/sb_ForeignID_t.dsp,
	Windows/sb_accessor_t/sb_accessor_t.dsp,
	Windows/sb_arc_t/sb_arc_t.dsp, Windows/sb_catd_t/sb_catd_t.dsp,
	Windows/sb_cats_t/sb_cats_t.dsp, Windows/sb_cell_t/sb_cell_t.dsp,
	Windows/sb_comp_t/sb_comp_t.dsp, Windows/sb_dddf_t/sb_dddf_t.dsp,
	Windows/sb_ddom_t/sb_ddom_t.dsp, Windows/sb_ddsh_t/sb_ddsh_t.dsp,
	Windows/sb_iden_t/sb_iden_t.dsp, Windows/sb_iref_t/sb_iref_t.dsp,
	Windows/sb_line_t/sb_line_t.dsp, Windows/sb_poly_t/sb_poly_t.dsp,
	Windows/sb_ring_t/sb_ring_t.dsp,
	Windows/sb_spatial_t/sb_spatial_t.dsp,
	Windows/sb_spdm_t/sb_spdm_t.dsp, Windows/sb_utils_t/sb_utils_t.dsp,
	Windows/sb_xref_t/sb_xref_t.dsp, Windows/sc_Field_t/sc_Field_t.dsp,
	Windows/sc_MultiTypeValue_t/sc_MultiTypeValue_t.dsp,
	Windows/sc_Subfield_t/sc_Subfield_t.dsp, Windows/sdtsxx/sdtsxx.dsp,
	Windows/sio_8211Converter_t/sio_8211Converter_t.dsp,
	Windows/sio_8211DDRField_t/sio_8211DDRField_t.dsp,
	Windows/sio_8211DDRLeader_t/sio_8211DDRLeader_t.dsp,
	Windows/sio_8211DDR_t/sio_8211DDR_t.dsp,
	Windows/sio_8211DRLeader_t/sio_8211DRLeader_t.dsp,
	Windows/sio_8211DR_t/sio_8211DR_t.dsp,
	Windows/sio_8211DirEntry_t/sio_8211DirEntry_t.dsp,
	Windows/sio_8211FieldFormat_t/sio_8211FieldFormat_t.dsp,
	Windows/sio_8211Field_t/sio_8211Field_t.dsp,
	Windows/sio_8211SubfieldFormat_t/sio_8211SubfieldFormat_t.dsp,
	Windows/sio_8211_t/sio_8211_t.dsp,
	Windows/sio_Buffer_t/sio_Buffer_t.dsp,
	Windows/sio_Error_t/sio_Error_t.dsp,
	Windows/sio_ReadWrite_t/sio_ReadWrite_t.dsp,
	Windows/sio_Writer_t/sio_Writer_t.dsp,
	Windows/sysutils/sysutils.dsp: Added VC++ project for sb_Directory
	test harnass

	* tests/Makefile.am, tests/sb_Directory_t.cpp: Added test harnass
	for sb_Directory

2002-12-04 16:50  mcoletti

	* Makefile, Makefile.in, aclocal.m4, configure: Adding in stable
	configuration files so that we don't have to keep rebuilding them
	on every platform, which might not have the latest autoconf,
	automake, nor libtool.

2002-12-03 19:29  mcoletti

	* configure.in: 
	Fixed bug in how the macro switching on the vector iterator
	equivalency was handled.

2002-12-03 18:47  mcoletti

	* sdts++/io/sio_8211Converter.h: 
	Now dynamically compensate on whether std::vector<char>::iterator
	== char *

	* doc/sdts++.doxygen: 
	Version number change and some documentation settings tweaked.

	* configure.in: 
	Added a check to determine if std::vector<char>::iterator == char*;
	apparently that's NOT the case with g++ 3.x.

2002-11-27 00:21  mcoletti

	* install-sh, contrib/prsdts/prsdts.cpp, sdts++/builder/sb_Ring.h,
	sdts++/io/sio_8211Converter.h, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_Buffer.cpp, sdts++/io/sio_Buffer.h,
	sdts++/io/sio_Reader.cpp, sdts++/io/sio_Writer.cpp,
	sysutils/t_basename.cpp, sysutils/t_dirname.cpp, tests/Makefile.am,
	tests/container_t.cpp, tests/sb_accessor_t.cpp,
	tests/sb_catd_t.cpp, tests/sb_cats_t.cpp, tests/sb_dddf_t.cpp,
	tests/sb_ddom_t.cpp, tests/sb_ddsh_t.cpp, tests/sb_ring_t.cpp,
	tests/sb_utils_t.cpp, tests/sb_xref_t.cpp, tests/sc_Field_t.cpp,
	tests/sc_MultiTypeValue_t.cpp, tests/sc_Subfield_t.cpp,
	tests/sio_8211Converter_t.cpp, tests/sio_8211DDRField_t.cpp,
	tests/sio_8211DDRLeader_t.cpp, tests/sio_8211DDR_t.cpp,
	tests/sio_8211DRLeader_t.cpp, tests/sio_8211DR_t.cpp,
	tests/sio_8211DirEntry_t.cpp, tests/sio_8211FieldFormat_t.cpp,
	tests/sio_8211Field_t.cpp, tests/sio_8211_t.cpp,
	tests/sio_Buffer_t.cpp, tests/sio_ReadWrite_t.cpp,
	tests/sio_Reader_t.cpp, tests/sio_Writer_t.cpp: 
	install-sh :
	
	  - updated with latest autoconf/automake/aclocal
	
	*.{cpp,h} :
	
	  - s/WIN32/_MSC_VER because it's better to switch on compiler than
	on
	    platform; moreover _MSC_VER is ALWAYS set by VC++, WIN32 is
	*only* set
	    in the IDE
	
	  - std namespace issues for more pedantic g++ 3.0
	
	  - g++ 3.0 cannot seem to promote from char* to
	    std::vector<char>::iterator; now use char* for that compiler
	
	  - was using ios::setf() when I should have been using
	ios::setstate()
	
	Notes:
	
	  sdts++ now works with g++ 3.0.  However, not all the contrib
	directory apps have been; but that should be trivial to effect. 
	(I've already done prsdts; the others can quickly follow suit.)

2002-11-25 19:16  mcoletti

	* sdts++/builder/sb_Rsdf.h: Fixed global search and replace bug

2002-11-24 22:07  mcoletti

	* sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Accessor.h,
	sdts++/builder/sb_At.cpp, sdts++/builder/sb_At.h,
	sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h,
	sdts++/builder/sb_Cats.cpp, sdts++/builder/sb_Cats.h,
	sdts++/builder/sb_Cell.h, sdts++/builder/sb_Clrx.cpp,
	sdts++/builder/sb_Comp.h, sdts++/builder/sb_Dddf.cpp,
	sdts++/builder/sb_Dddf.h, sdts++/builder/sb_Ddom.cpp,
	sdts++/builder/sb_Ddom.h, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Ddsh.h, sdts++/builder/sb_Dq.cpp,
	sdts++/builder/sb_Dq.h, sdts++/builder/sb_ForeignID.cpp,
	sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_Iden.cpp,
	sdts++/builder/sb_Iden.h, sdts++/builder/sb_Iref.cpp,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Ldef.h, sdts++/builder/sb_Line.h,
	sdts++/builder/sb_Module.cpp, sdts++/builder/sb_Module.h,
	sdts++/builder/sb_Pnts.cpp, sdts++/builder/sb_Pnts.h,
	sdts++/builder/sb_Poly.h, sdts++/builder/sb_Ring.h,
	sdts++/builder/sb_Rsdf.cpp, sdts++/builder/sb_Rsdf.h,
	sdts++/builder/sb_Spatial.h, sdts++/builder/sb_Spdm.h,
	sdts++/builder/sb_Stat.cpp, sdts++/builder/sb_Stat.h,
	sdts++/builder/sb_Xref.cpp, sdts++/builder/sb_Xref.h,
	sdts++/container/sc_Field.cpp, sdts++/container/sc_Module.cpp,
	sdts++/container/sc_Module.h,
	sdts++/container/sc_MultiTypeValue.cpp,
	sdts++/container/sc_MultiTypeValue.h,
	sdts++/container/sc_Record.cpp, sdts++/container/sc_Record.h,
	sdts++/container/sc_Subfield.cpp, sdts++/io/sio_8211Converter.cpp,
	sdts++/io/sio_8211Converter.h, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_8211DDRField.h, sdts++/io/sio_8211DDRLeader.cpp,
	sdts++/io/sio_8211DDRLeader.h, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_8211DR.h, sdts++/io/sio_8211DRLeader.cpp,
	sdts++/io/sio_8211DRLeader.h, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_8211Field.h, sdts++/io/sio_8211FieldArea.cpp,
	sdts++/io/sio_8211FieldArea.h, sdts++/io/sio_8211FieldFormat.cpp,
	sdts++/io/sio_8211FieldFormat.h, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_8211Record.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h, sdts++/io/sio_Writer.cpp,
	sdts++/io/sio_Writer.h, sdts++/logical/sl_String.cpp,
	sdts++/logical/sl_String.h: 
	- port to g++ 3.0 - some aesthetic reformatting - now check for
	_MSC_VER for disabling warnings instead of WIN32
	
	Notes:
	
	g++ 3.0 port is incomplete.  This is an intermediate commit.  There
	are still some compilation issues to be resolved; but MOST of the
	porting is done.

2002-10-11 20:09  mcoletti

	* Windows/Makefile.am: 
	Added VC++ project files for missing test harnasses.

2002-10-11 19:55  mcoletti

	* Windows/Makefile.am, Windows/all.dsw,
	Windows/container_t/container_t.dsp, Windows/prsdts/prsdts.dsp,
	Windows/sb_ForeignID_t/sb_ForeignID_t.dsp,
	Windows/sb_cats_t/sb_cats_t.dsp, Windows/sb_cell_t/sb_cell_t.dsp,
	Windows/sb_comp_t/sb_comp_t.dsp, Windows/sb_dddf_t/sb_dddf_t.dsp,
	Windows/sb_ddom_t/sb_ddom_t.dsp, Windows/sb_ddsh_t/sb_ddsh_t.dsp,
	Windows/sb_iden_t/sb_iden_t.dsp, Windows/sb_iref_t/sb_iref_t.dsp,
	Windows/sb_line_t/sb_line_t.dsp, Windows/sb_poly_t/sb_poly_t.dsp,
	Windows/sb_ring_t/sb_ring_t.dsp,
	Windows/sb_spatial_t/sb_spatial_t.dsp,
	Windows/sb_spdm_t/sb_spdm_t.dsp, Windows/sb_utils_t/sb_utils_t.dsp,
	Windows/sb_xref_t/sb_xref_t.dsp, Windows/sdtsxx/sdtsxx.dsp,
	Windows/sysutils/sysutils.dsp, sdts++/builder/sb_Cell.h,
	sdts++/builder/sb_Comp.cpp, sdts++/builder/sb_Comp.h,
	sdts++/builder/sb_Dddf.cpp, sdts++/builder/sb_Dddf.h,
	sdts++/builder/sb_Ldef.h, sdts++/builder/sb_Line.cpp,
	sdts++/builder/sb_Line.h, sdts++/builder/sb_Poly.cpp,
	sdts++/builder/sb_Poly.h, sdts++/builder/sb_Ring.cpp,
	sdts++/builder/sb_Ring.h, sdts++/builder/sb_Spdm.cpp,
	sdts++/builder/sb_Spdm.h, tests/sb_arc_t.cpp, tests/sb_cell_t.cpp,
	tests/sb_dddf_t.cpp, tests/sb_ddom_t.cpp, tests/sb_ddsh_t.cpp,
	tests/sb_line_t.cpp, tests/sb_poly_t.cpp, tests/sb_spdm_t.cpp,
	tests/sb_utils_t.cpp, tests/sio_8211DDR_t.cpp: Many small changes
	to make VC++ 6.x happy.

2002-10-10 21:16  mcoletti

	* sdts++/Makefile.am, sdts++/builder/Makefile.am,
	sdts++/container/Makefile.am, sdts++/io/FormatLexer.c,
	sdts++/io/FormatParser.c, sdts++/io/Makefile.am,
	sdts++/logical/Makefile.am: [no log message]

	* Makefile.am, configure.in: 
	Make dist rule now works.  Also recursive make of sysutils works
	now.  Deleted old Makefiles in sdts++ sub-directories that have
	been deprecated.

2002-10-10 20:35  mcoletti

	* tests/sb_iden_t.cpp, tests/sh_Comp_t: sb_ident_t.cpp :
	
	  - cleaned up code by removing broken legacy stuff
	
	sh_Comp_t :
	
	  - it was returning the wrong exit code on a good run of the test
	harnass

2002-10-08 21:50  mcoletti

	* tests/Makefile.am: [no log message]

	* contrib/mksdts/Makefile.am, sysutils/configure.in:   - synched
	with autoconf & automake & libtool advances

	* AUTHORS, ChangeLog, Makefile.am, configure.in, install-sh: 
	AUTHORS :
	
	  - had some VERY out of date e-mail addresses
	
	ChangeLog :
	
	  - up to synch with recent CVS changes
	
	Makefile.am, configure.in, install.sh :
	
	  - synched with autoconf & automake & libtool advances

	* sdts++/Makefile.am:	- synched with autoconf & automake &
	libtool advances
	
	Note:
	
	  Still need to properly set up distribution rules.
	
	  Got rid of kludgely symbolic link trick now that automake
	properly
	  supports sub-directories.

2002-10-07 20:44  mcoletti

	* sdts++/builder/sb_Catd.h, sdts++/builder/sb_Cats.h,
	sdts++/builder/sb_Cell.h, sdts++/builder/sb_Ddom.h,
	sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_Rsdf.h,
	sdts++/builder/sb_Stat.h, sdts++/container/sc_Field.h,
	sdts++/container/sc_Subfield.cpp, sdts++/io/FormatParser.c,
	sdts++/io/FormatParser.yy, sdts++/io/sio_8211DDRLeader.cpp,
	sdts++/io/sio_8211DDRLeader.h, sdts++/io/sio_8211DRLeader.cpp,
	sdts++/io/sio_8211DirEntry.cpp, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211FieldFormat.h,
	sdts++/io/sio_8211SubfieldFormat.cpp,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_Reader.h,
	sdts++/io/sio_Utils.cpp, sdts++/io/sio_Utils.h,
	sdts++/io/sio_Writer.h: got rid of annoying VC++ 4786 warnings and
	fixed some std namespace issues to appease VC++

2002-07-30 20:16  mcoletti

	* Windows/sb_ddsh_t/sb_ddsh_t.dsp, Windows/sb_ddsh_t/sb_ddsh_t.dsw:
	
	Added VC++ project and workspace files.

2002-07-30 20:12  mcoletti

	* Windows/sb_arc_t/sb_arc_t.dsp, Windows/sb_arc_t/sb_arc_t.dsw,
	Windows/sb_catd_t/sb_catd_t.dsw, Windows/sb_xref_t/sb_xref_t.dsp,
	Windows/sb_xref_t/sb_xref_t.dsw: [no log message]

	* Windows/sb_accessor_t/sb_accessor_t.dsw: 
	Added VC++ workspace and project files.

2002-07-30 20:06  mcoletti

	* Windows/sb_cats_t/sb_cats_t.dsp, Windows/sb_cats_t/sb_cats_t.dsw,
	Windows/sb_cell_t/sb_cell_t.dsp, Windows/sb_cell_t/sb_cell_t.dsw,
	Windows/sb_comp_t/sb_comp_t.dsp, Windows/sb_comp_t/sb_comp_t.dsw,
	Windows/sb_dddf_t/sb_dddf_t.dsp, Windows/sb_dddf_t/sb_dddf_t.dsw,
	Windows/sb_ddom_t/sb_ddom_t.dsp, Windows/sb_ddom_t/sb_ddom_t.dsw,
	Windows/sb_iden_t/sb_iden_t.dsp, Windows/sb_iden_t/sb_iden_t.dsw,
	Windows/sb_iref_t/sb_iref_t.dsp, Windows/sb_iref_t/sb_iref_t.dsw,
	Windows/sb_line_t/sb_line_t.dsp, Windows/sb_line_t/sb_line_t.dsw,
	Windows/sb_poly_t/sb_poly_t.dsp, Windows/sb_poly_t/sb_poly_t.dsw,
	Windows/sb_ring_t/sb_ring_t.dsp, Windows/sb_ring_t/sb_ring_t.dsw,
	Windows/sb_spatial_t/sb_spatial_t.dsp,
	Windows/sb_spatial_t/sb_spatial_t.dsw,
	Windows/sb_spdm_t/sb_spdm_t.dsp, Windows/sb_spdm_t/sb_spdm_t.dsw,
	Windows/sb_utils_t/sb_utils_t.dsp,
	Windows/sb_utils_t/sb_utils_t.dsw: [no log message]

	* Windows/sb_ForeignID_t/sb_ForeignID_t.dsp,
	Windows/sb_ForeignID_t/sb_ForeignID_t.dsw: 
	Added project and workspace files.

2002-07-17 19:44  mcoletti

	* configure.in, sdts++/builder/sb_Accessor.cpp: Made cygwin
	friendly

2002-04-29 18:03  mcoletti

	* sdts++/builder/sb_Comp.h: 
	- nuked DOS line feeds - beautified code via re-indentation

2002-04-04 19:23  athmer

	* tests/abcdcell.ddf: Adding a sample dataset use in testing the
	CELL moudule.

	* tests/Makefile.am: Added tests apps to build.

2002-04-04 19:09  athmer

	* tests/abcdspdm.ddf: Adding the sample dataset use in testing teh
	SPDM module.

	* tests/abcddddf.ddf: Adding a sample dataset to use in testing the
	DDDF module.

	* tests/abcdcomp.ddf: Adding a sample dataset to use in testing the
	COMP module.

	* tests/abcdddom.ddf: Adding a sample dataset for testing the DDOM
	module.

	* tests/abcdpoly.ddf: Adding a sample dataset for testing the POLY
	module.

2002-04-04 18:44  athmer

	* tests/abcdxref.ddf: Adding a sample dataset to use in testing the
	XREF module

	* tests/abcdiref.ddf: Adding a smaple dataset to be used in testing
	the IREF moudule.

2002-04-02 18:37  athmer

	* tests/sb_ring_t.cpp: Adding a test harness application for the
	Ring module.

2002-04-02 00:01  mcoletti

	* sdts++/io/sio_Utils.cpp, sdts++/io/sio_Utils.h: Added
	dumpConverterDictionary to sio_Utils

2002-04-01 23:36  mcoletti

	* sdts++/Makefile.am, sdts++/builder/Makefile.am,
	sdts++/builder/pointnode.def, sdts++/builder/sb_Line.cpp: Added
	point node builder class to build.

	* sdts++/container/sc_Subfield.cpp: Fixed some broken casts.

	* ChangeLog, configure.in: Set up for upcoming version 1.4.1.

	* sdts++/io/sio_Reader.cpp, sdts++/io/sio_Utils.cpp,
	sdts++/io/sio_Utils.h: sio_Utils :
	
	 - now use sio_Utils namespace instead of class with static members
	 - now properly use [] to delete arrays
	 - added static CVS ident string
	
	sio_Reader :
	
	 - minor code formatting

2002-03-27 23:47  mcoletti

	* sdts++/builder/sb_Utils.cpp: 
	Strip trailing white space when adding binary converters; binary
	subfield names will have trailing whitespace if the mnemonic field
	format is fixed and not variable and too wide.	This was creating a
	problem whereby binary converters weren't found when binary SDTS
	data was being read.

2002-03-27 20:37  athmer

	* sdts++/builder/Makefile.am: Change the name of the point-node
	module in the make file from pointnode to pnts, which is the
	mnemonic of the module

	* sdts++/builder/mkimp.pl: Added the changes needed to create a
	point-node module builder class

2002-03-27 20:05  athmer

	* sdts++/builder/sb_Pnts.cpp: Adding the point-node module builder
	class

	* sdts++/builder/pnts.def: Adding the defination file for the point
	node module, used by mkheader.pl and mkimp.pl.

	* sdts++/builder/sb_Pnts.h: Adding the header file for the
	point-node moudle code

	* tests/Makefile.am: Adding a new version so the point-node module
	test app will be compiled

	* tests/abcdpnts.ddf: Just adding a test file for the point-node
	test harness application to use as input.

2002-03-27 20:01  athmer

	* tests/sb_pnts_t.cpp: Adding a test harness application for the
	point-node module

2002-03-27 04:20  mcoletti

	* sdts++/builder/sb_Line.cpp: made reading SADRs marginally faster
	by replacing O(n) search with O(1) dispatching.  This may indicate
	the need to rethink implementation of builder ingest functions at
	some point.

2002-03-26 19:58  mcoletti

	* doc/sdts++.texi: 
	Added Todd Sprague to CREDITS.

	* sdts++/builder/sb_Catd.cpp: 
	forgot to return true as default for sb_Catd::createDirectory().
	
	Thanks to  "Todd Sprague" <todd@pcavionics.com> for pointing this
	out.

2002-03-04 19:18  mcoletti

	* sdts++/io/sio_8211Field.cpp: 
	Committed Mike Child's patch whereby in rare pathological cases,
	the read would end prematurely if the pointer happened to be
	sitting on a character value that coincidentally had a delimiter
	value.

2002-02-27 21:43  mcoletti

	* sdts++/io/sio_8211Directory.h: Fully qualified std namespace
	items.

2002-02-27 21:38  mcoletti

	* sdts++/builder/sb_Spatial.h: 
	Now sb_Spatials created without initializing subfields have their
	internal sc_Subfield coordinates set to "unvalued".

2002-02-13 20:56  mcoletti

	* Windows/prsdts/prsdts.dsp: added project file for prsdts

2002-02-13 19:45  mcoletti

	* sdts++/io/sio_ConverterFactory.cpp: VC++ and g++ have different
	auto_ptr implementations, or ones that interpret the assignment
	operator differently.  This is a compromise fix such that it works
	with both compilers.

2002-02-13 18:57  mcoletti

	* Windows/sdtsxx/sdtsxx.dsp, sdts++/builder/sb_Accessor.cpp,
	sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_ForeignID.cpp,
	sdts++/builder/sb_ForeignID.h, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_ConverterFactory.cpp:
	Changes for VC++ 6.0 SP5.  It compiles, but I dunno if it works
	yet.  Will verify next.

2002-02-01 21:11  mcoletti

	* sdts++/builder/mkheader.pl: 
	Corrected problem whereby module names were getting truncated
	causing all manner of other errors.

2002-01-24 01:03  mcoletti

	* sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h: sb_Catd
	find() is now const

2002-01-17 21:11  mcoletti

	* sdts++/container/sc_Module.h: 
	Specify namespace std for ostream.  Fixes rightly pedantic C++
	compiler errors.  Submitted by Garry Petrie
	<garry.petrie@resurgentsoftware.com>.

2002-01-16 18:01  mcoletti

	* ChangeLog, configure.in, doc/SDTS++FAQ, NEWS, README: Version
	1.4a

2001-12-28 23:20  mcoletti

	* sdts++/builder/mkimp.pl: 
	- spatials are now no longer an embedded reference
	
	- spatials are reset to (0.0, 0.0, 0.0)
	
	- added back in explicit name and mnemonic strings for foreign and 
	 attribute IDs
	
	- in _ingest_record(), removed what turned out to be redundant (and
	  erroneous) check for the last field between reading fields; this
	would	cause premature termination of reading the record's
	contents.
	
	- removed superfluous printing of spatial coordinates as they're
	read
	
	- in getRecord() spatial coordinates are now in separate sc_Fields
	instead   of getting concatenated to the same sc_Field
	
	- some minor formatting and beautification

	* sdts++/builder/sb_Comp.cpp, sdts++/builder/sb_Line.cpp:
	re-generated these modules from new mkimpl.pl

	* tests/sb_line_t.cpp: 
	- now use sio_ConverterFactory to get proper binary converters
	
	- now exercise also getRecord()
	
	- minor code reformatting and beautification

2001-12-28 19:48  mcoletti

	* tests/Makefile.am, tests/sh_Comp_t: Added wrapper shell for COMP
	builder module test harnass.

2001-12-28 00:01  mcoletti

	* tests/Makefile.am, tests/sb_comp_t.cpp, tests/sb_utils_t.cpp: 
	Makefile.am :
	
	  - added sb_comp_t.cpp to build list
	
	sb_comp_t :
	
	  - eliminated converters since composite module will never have
	    binary subfields
	
	  - setRecord() was getting tested twice, and getRecord() not at
	all; fixed
	
	sb_utils_t :
	
	  - added test for sb_Utils::add_field()

	* sdts++/builder/mkimp.pl, sdts++/builder/sb_Comp.cpp,
	sdts++/builder/sb_ForeignID.cpp: 
	mkimp.pl :
	
	 - now use sio_ConverterFactory to get proper converters, thus
	   reducing run-time memory footprint by not having duplicate
	   converters
	
	 - corrected bug whereby the module mnemonic was being used instead
	of
	   its long name
	
	sb_Comp.cpp :
	
	 - results of re-running ``mkimp.pl comp.def'' and then
	re-formatting
	   the source
	
	sb_ForeignID.cpp :
	
	 - added missing double include sentinals
	
	 - now use converter factory for "A" and "I" converters

2001-12-27 23:05  mcoletti

	* sdts++/builder/sb_Utils.cpp: 
	Corrected bug in add_field() where name and mnemonic values were
	swapped.  Also, in add_foreign_id(), now set the foreign ID name;
	previously only the mnemonic was getting assigned.

2001-12-27 20:59  mcoletti

	* sdts++/io/sio_8211Converter.cpp: Arrays were being improperly
	deleted, probably causing memory leaks.

2001-12-21 23:30  mcoletti

	* sdts++/io/sio_Reader.cpp: 
	Corrected bug in sio_Reader whereby field terminators were being
	checked for after every field in a repeating field, when actually
	it only needed to be checked for the last field in a sequence of
	repeating field.  This bug would cause the internal data stream
	pointer to be erroneously incremented in the case of binary data
	that happened to have an octet that had a field terminator value
	right at the end of a binary field in a series of binary fields.

2001-12-21 19:09  athmer

	* sdts++/Makefile.am: Updated the file to include the added source
	files.

2001-12-21 17:20  athmer

	* sdts++/builder/Makefile.am: Added the new modules to the file
	list of source files

	* sdts++/builder/mkimp.pl: Made corrections to add additional
	checks in teh ingest record function.

2001-12-21 17:11  athmer

	* sdts++/builder/sb_Spdm.h: Adding the header file for the Spatail
	Domain Module's source code

2001-12-21 16:57  athmer

	* sdts++/builder/sb_Spdm.cpp: Adding the source code (.cpp file)
	for the Spatial Domain Module

	* sdts++/builder/spdm.def: Adding the def file for the Spatial
	Domain module

2001-12-21 16:44  athmer

	* sdts++/builder/ring.def: Add defination file for the Ring Module

	* sdts++/builder/sb_Ring.cpp: Adding teh source code (.cpp file)
	for the Ring Module

	* sdts++/builder/sb_Ring.h: Adding the header file for the source
	code of the Ring module

2001-12-21 16:32  athmer

	* sdts++/builder/comp.def: Adding the def file for the composit
	module

2001-12-21 16:24  athmer

	* sdts++/builder/sb_Comp.h: Adding the header file for the Compsite
	module source code

	* sdts++/builder/sb_Comp.cpp: Adding the composite module source
	code (.cpp file)

2001-12-21 15:38  athmer

	* tests/sb_comp_t.cpp: Adding testharness app for the composite
	module

	* sdts++/builder/sb_Poly.h: the header file for the Polygon module

	* sdts++/builder/sb_Poly.cpp: the source code (cpp file) for the
	the Polygon moudule

	* sdts++/builder/poly.def: Adding the def file for the polygon
	module

2001-12-21 15:20  athmer

	* tests/sb_spdm_t.cpp: Adding in the test harness app for the spdm
	module

	* tests/sb_poly_t.cpp: adding test harness for the SPDM module

2001-10-24 20:02  mcoletti

	* sdts++/builder/Makefile.am: Now include def files as part of
	distribution

2001-10-10 20:48  mcoletti

	* sdts++/builder/mkimp.pl: 
	The destructor no longer needs to explicitly delete the
	implementation structure since we now use std::auto_ptr, which
	automatically deletes it when the holding object is deleted.

2001-10-10 20:37  mcoletti

	* sdts++/io/FormatParser.c: 
	Re-gened?

	* sdts++/builder/Makefile.am, sdts++/builder/line.def,
	sdts++/builder/mkheader.pl, sdts++/builder/pointnode.def,
	sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_PointNode.cpp,
	sdts++/builder/sb_PointNode.h: 
	Added PointNode builder module.
	
	Cleaned up some of the sb_ForeignID documentation.

	* sdts++/Makefile.am: 
	Added PointNode builder module.

2001-10-09 21:23  mcoletti

	* sdts++/io/sio_Reader.cpp: 
	Corrected bug pointed out by Mike Childs.
	
	The full text of his e-mail is included below:
	
	I believe I've found a problem in sio_Reader.cpp. Starting on line
	443, you have the following if statement:
	
	  if ( (field_data_pos <= field_data_length )  &&
		(sio_8211FieldTerminator == *field_data ||
		sio_8211UnitTerminator	== *field_data	) )
	    {
	      field_data++;		// skip any terminator
	      field_data_pos++;
	    }
	
	I believe that should read:
	
	  if ( (field_data_pos < field_data_length )  &&
	       (sio_8211FieldTerminator == *field_data ||
		sio_8211UnitTerminator	== *field_data	) )
	    {
	      field_data++;		// skip any terminator
	      field_data_pos++;
	    }
	
	Otherwise, when field_data_pos is equal to field_data_length, the
	dereference of field_data on the subsequent lines will read past
	the defined bounds. Most of the time this is fine, but if you
	happen to be right on a memory page boundary and the next page is
	protected, problems can occur.	Specifically, I was getting a read
	access violation on Windows NT based systems when reading in some
	DLG's.

2001-07-17 20:50  mcoletti

	* sysutils/Makefile.am, sysutils/stringutils.cpp,
	sysutils/stringutils.h, sysutils/t_stringutils.cpp: Added start of
	basic string utility functions.

2001-07-11 20:40  mcoletti

	* sdts++/io/FormatParser.c, sdts++/io/FormatParser.h,
	sdts++/io/FormatParser.yy: eliminated namespace conflict in yacc
	source

2001-07-11 20:06  mcoletti

	* sdts++/Makefile.am: 
	   Added DDDF builder class.

	* tests/Makefile.am, tests/sb_dddf_t.cpp, tests/sb_line_t.cpp: 
	  Added test driver for DDDF builder class.

	* sdts++/builder/sb_Dddf.cpp: 
	   Corrected bug whereby empty option fields would cause subsequent
	   DDDF module record field values to be skipped.

2001-07-11 18:17  mcoletti

	* sdts++/builder/Makefile.am, sdts++/builder/dddf.def,
	sdts++/builder/mkheader.pl, sdts++/builder/sb_Dddf.cpp,
	sdts++/builder/sb_Dddf.h: 
	Added builder module for DDDF modules.

2001-07-11 18:11  mcoletti

	* sdts++/builder/mkheader.pl: accidentally checked in hexdump
	output of mkheader.pl -- corrected

2001-07-03 18:52  mcoletti

	* sdts++/builder/sb_Line.cpp: 
	Corrected infinite loop bugs in _ingest_record().  Will have to
	make corresponding changes to mkimp.pl that generated this source
	code.

	* sdts++/builder/mkimp.pl: 
	Made corresponding correction in source perl script.

2001-07-02 14:26  mcoletti

	* sdts++/builder/sb_Catd.cpp: 
	Made happy with g++ 2.96; by-product corrected some bugs that
	2.95.x was happy with.	I.e., access to struct sb_Directory::Imp
	from static function when I shouldn't have been able to; made
	static function a member of that struct.

2001-07-02 13:49  mcoletti

	* contrib/sdtsdem2xyz/Makefile.am: 
	Forgot to add automake file.

2001-06-18 19:02  mcoletti

	* contrib/sdtsdem2xyz/sdtsdem2xyz.1: man page formatting

	* configure.in: automake bug was causing .C script to thing tha t
	.C was a valid executable extension if AM_LIBTOOL_PROG came after
	AC_LANGCPLUSPLUS ... submitted bug report to automake folks

2001-06-18 18:03  mcoletti

	* configure.in, contrib/Makefile.am,
	contrib/sdtsdem2xyz/sdtsdem2xyz.1,
	contrib/sdtsdem2xyz/sdtsdem2xyz.cpp: Added utility sdtsdem2xyz

2001-06-12 23:42  mcoletti

	* sdts++/builder/sb_Cell.h: 
	s/loadElevation/loadData
	
	   That is, a CELL module need not be elevation specific, so I
	changed
	the name to reflect this.
	
	   Also, repaired loadData() so that it properly loads in repeating
	fields.  The back inserter idea works peachy!

2001-06-11 21:35  mcoletti

	* sdts++/builder/mkimp.pl: schema_ now first checks to see that
	schema is built, and builds it if its not, before return reference
	to it.

	* sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h: mkimp.pl
	generated source after emacs cleaned it up

2001-06-11 21:24  mcoletti

	* sdts++/builder/mkimp.pl: sanitized away line module specific code

2001-06-11 20:36  mcoletti

	* sdts++/builder/mkheader.pl: Removed DOS line feeds and LINE
	module specific code.

2001-06-11 20:29  mcoletti

	* sdts++/builder/mkimp.pl, sdts++/builder/sb_Line.cpp,
	sdts++/builder/sb_Line.h: Repaired last bits of script, which
	entailed adding back in :: that I had accidentally nuked.

2001-06-08 23:06  mcoletti

	* sdts++/builder/mkimp.pl: more fixes -- more to go

2001-06-08 22:45  mcoletti

	* sdts++/builder/line.def: made compatible with mkimp.pl syntax

	* sdts++/builder/mkheader.pl, sdts++/builder/mkimp.pl: 
	First cut at adding Keith's changes to reflect use of spatial
	object and foreign identifier aggregates.  I corrected the mkimp.pl
	script to omit superfluous ',' in initializer list; but it still
	generates broken code.	Looking into that now.

2001-05-23 17:25  mcoletti

	* sdts++/builder/sb_Clrx.cpp: corrected typo

2001-05-22 05:58  mcoletti

	* sdts++/Makefile.am, sdts++/builder/sb_Clrx.cpp,
	sdts++/builder/sb_Clrx.h: added missing schmea related functions
	for new color index builder module

2001-05-22 05:37  mcoletti

	* sdts++/builder/Makefile.am, sdts++/builder/clrx.def,
	sdts++/builder/sb_Clrx.cpp, sdts++/builder/sb_Clrx.h: 
	Added builder module for color index module.

2001-05-18 23:08  mcoletti

	* contrib/tomksdts/convert.cpp: IT WORKS!!!!

	* contrib/Makefile.am, configure.in: Added tomksdts

2001-05-18 22:40  mcoletti

	* contrib/tomksdts/convert.cpp: Now emits schema information

2001-05-18 22:23  mcoletti

	* contrib/tomksdts/Makefile.am, contrib/tomksdts/convert.cpp,
	contrib/tomksdts/convert.h, contrib/tomksdts/tomksdts.1,
	contrib/tomksdts/tomksdts.cpp: Added convert function, which is the
	core of this app.

2001-05-18 21:40  mcoletti

	* contrib/tomksdts/Makefile.am, contrib/tomksdts/tomksdts.1,
	contrib/tomksdts/tomksdts.cpp: First cut at utility to convert
	modules into mksdts files

2001-05-12 01:01  mcoletti

	* sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h: 
	For some stupid reason std::auto_ptr doesn't like to destroy
	structs after it's only seen the forward declaration; so I went
	back to ole fashioned stupid pointers.

2001-05-11 21:48  mcoletti

	* sdts++/builder/sb_Catd.cpp: 
	sb_Directory( string ) now properly initializes its internal data
	structure.

2001-05-11 21:44  mcoletti

	* sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h: 
	Added sb_Directory, which is a convenience class for quickly
	cross-referencing SDTS module NAMES with actual file names as found
	in a given CATD module.

2001-05-08 14:37  mcoletti

	* doc/sdts++.texi: Added credit for Dan Custer

	* ChangeLog: Version 1.3.1a

2001-05-08 03:50  mcoletti

	* NEWS, README, configure.in, doc/SDTS++FAQ, doc/sdts++.doxygen,
	sdts++/Makefile.am, tests/Makefile.am: More Boost related changes

2001-05-07 19:59  mcoletti

	* configure.in, contrib/pr8211/Makefile.am, sdts++/Makefile.am:
	HOPEFULLY this will be the last change needed to test for the Boost
	library

2001-05-02 19:45  mcoletti

	* contrib/mksdts/Makefile.am, contrib/pr8211/Makefile.am,
	contrib/prsdts/Makefile.am: forgot to link in sysutils ... fixed

2001-05-02 19:02  mcoletti

	* ChangeLog, Makefile.am, NEWS, README, configure.in,
	doc/SDTS++FAQ, doc/sdts++.texi, tests/Makefile.am, ChangeLog:
	Version 1.3a

2001-03-30 03:26  mcoletti

	* sdts++/builder/sb_Utils.cpp: 
	Corrected two identical bugs where I forget to return `true' when
	all DOES go well in the IREF and DDSH converter utility functions.

2001-03-27 18:13  mcoletti

	* sdts++/builder/line.def: Added LINE module script template for
	generating header and implementation files

2001-03-27 01:07  mcoletti

	* sysutils/Makefile.am: added stuff to insure headers get installed
	and included in tarballs

2001-03-26 21:41  mcoletti

	* configure.in: no longer need to check for basename here

2001-03-26 21:16  mcoletti

	* contrib/mkstat/Makefile.am, contrib/mkstat/mkstat.cpp: 
	Now use ${top_srcdir}/sysutils library.

2001-03-26 21:10  mcoletti

	* sdts++/builder/sb_Accessor.cpp: 
	Now use fileutils::dirname().

2001-03-26 20:47  mcoletti

	* Makefile.am, configure.in: 
	Added nested project sysutils.	(It has its separate repository
	entry as this is useful for multiple projects.)
	
	Also, HOPEFULLY fixed annoying find-Boost-library-please bug.

2001-03-25 21:54  mcoletti

	* sysutils/Makefile.am, sysutils/fileutils.cpp,
	sysutils/t_basename.cpp: 
	Finished basename(); added test driver for it.

2001-03-25 21:44  mcoletti

	* sysutils/Makefile.am, sysutils/configure.in,
	sysutils/fileutils.cpp, sysutils/fileutils.h,
	sysutils/t_dirname.cpp: 
	It was stupid of me to rely on searching for existing dirname() and
	basename() implementations when I could just re-write them in C++. 
	I did so for dirname(); basename() to follow.  Also, added driver
	for dirname().

2001-03-25 00:22  mcoletti

	* sysutils/configure.in: erroneously set variable when libgen test
	fails

2001-03-25 00:13  mcoletti

	* sysutils/Makefile.am, sysutils/configure.in,
	sysutils/fileutils.cpp, sysutils/fileutils.h: branches:  1.1.1;
	Initial revision

	* sysutils/Makefile.am, sysutils/configure.in,
	sysutils/fileutils.cpp, sysutils/fileutils.h: 
	Initial cut of generic C++ wrappers for uncommon UNIX system
	utilities.

2001-03-23 20:18  mcoletti

	* sdts++/builder/sb_Utils.cpp, sdts++/builder/sb_Utils.h: 
	Added addConverters(), which takes two arguments.  The first is a
	string containing a filename for a CATD module; the second is for a
	converter dictionary.  The idea is to use the CATD module to find
	the IREF and DDSH modules, open them up, and then use their
	contents to add appropriate binary converters to the given
	dictionary.

2001-03-22 21:39  mcoletti

	* sdts++/builder/sb_Utils.cpp, sdts++/builder/sb_Utils.h: 
	Added another sb_Utils::addConverter(), this time for DDSH module
	records.

	* tests/sb_utils_t.cpp: 
	Added another sb_Utils::addConverter(), this time for DDSH module
	records.  Extended the test driver to exercise it.

2001-03-22 21:19  mcoletti

	* tests/sb_utils_t.cpp: 
	Added new utility function sb_Utils::addConverter() that will add
	an appropriate binary converter to a converter dictionary based on
	an IREF::HFMT.	Extended test driver to exercise addConverter().

	* sdts++/builder/sb_Utils.cpp, sdts++/builder/sb_Utils.h: 
	Added new utility function sb_Utils::addConverter() that will add
	an appropriate binary converter to a converter dictionary based on
	an IREF::HFMT.

2001-03-21 19:16  mcoletti

	* ChangeLog: Synched with changes

2001-03-17 01:05  mcoletti

	* sdts++/builder/sb_Utils.h: 
	FINALLY made sb_Utils a namespace instead of a class wrapping
	static functions.  All C++ compilers now support namespaces.

2001-03-08 18:13  mcoletti

	* sdts++/builder/sb_Accessor.cpp: Added necessary static keywords
	to give local linkage.

2001-03-01 19:34  mcoletti

	* sdts++/container/sc_MultiTypeValue.cpp: changed sc_MultiValue
	comparison such that trailing spaces are clipped before comparison

2001-02-26 03:27  mcoletti

	* tests/sio_ConverterFactory_t: removed this executable from
	repository

	* sdts++/builder/sb_Utils.cpp, sdts++/builder/sb_Utils.h: 
	TODO :
	
	 - removed sb_Line input/output items as that's completed
	
	sb_Utils.cpp :
	
	 - corrected typo
	 - simplified getSubfieldByMnem()
	 - simplified getSubfieldByName()
	 - added sb_Utils::find()
	
	sb_Utils.h :
	
	 - added sb_Utils::find()
	 - added XXX /todo comment regarding future use of namespaces

	* tests/Makefile.am, tests/sb_utils_t.cpp,
	tests/sio_ConverterFactory_t: 
	Makefile.am, sb_utils_t.cpp :
	
	 - added test driver for sb_Utils utility functions
	
	sio_ConverterFactory_t :
	
	 - hmm, this binary file shouldn't be here; I'll delete this from
	the
	   repository

	* sdts++/container/sc_MultiTypeValue.cpp,
	sdts++/container/sc_Subfield.h: 
	sc_MultiTypeValue.cpp :
	
	 - the string comparison (i.e., std::string::operator==() wasn't
	   working correctly for some reason, so I do the comparison by
	hand
	
	sc_Subfield :
	
	 - added name() and mnemonic() short-cuts for getName(),
	   getMnemonic(), setName(), and setMnemonic()

	* TODO: 
	TODO :
	
	 - removed sb_Line input/output items as that's completed

2001-02-09 01:06  mcoletti

	* tests/sb_cell_t.cpp: 
	Changed to use sio_ConverterFactory.

2001-02-07 22:19  mcoletti

	* sdts++/builder/sb_Line.cpp: Got rid of superfluous "LINE"
	statement in _build_schema().

2001-02-07 19:49  mcoletti

	* tests/sio_Writer_t.cpp: Changed to use sio_ConverterFactory to
	simplify code.

2001-02-07 19:39  mcoletti

	* tests/sio_ReadWrite_t.cpp: Now uses sio_ConverterFactory to
	reduce code complexity.

	* tests/sio_Reader_t.cpp: No use sio_ConverterFactory to reduce
	complexity.

2001-02-07 19:28  mcoletti

	* contrib/prsdts/prsdts.cpp: Now uses sio_ConverterFactory and so
	is MUCH SMALLER.

2001-02-07 19:19  mcoletti

	* doc/sdts++.texi: Added documentation for using
	sio_ConverterFactory

2001-02-07 19:11  mcoletti

	* sdts++/io/sio_ConverterFactory.h:
	sio_ConverterFactory::instance() needs to be static to return
	Canonical Instance of the factory object.

	* tests/sio_ConverterFactory_t.cpp: Added test driver for
	sio_ConverterFactory

2001-02-02 23:35  mcoletti

	* tests/Makefile.am, tests/sio_ConverterFactory_t: Added
	sio_ConverterFactory test driver

2001-02-02 22:58  mcoletti

	* sdts++/Makefile.am: 
	Added sio_ConverterFactory.

	* sdts++/io/Makefile.am, sdts++/io/sio_ConverterFactory.cpp,
	sdts++/io/sio_ConverterFactory.h: 
	Added sio_ConverterFactory.  This is a convenience class for easily
	getting at a specific type of sio_8211Converter.  Note that this is
	a Singleton class in that there's only one canonical instance.	It
	also is obviously a Factory design pattern implementation, too, in
	that appropriate sio_8211Converters are created on the fly given a
	string parameter that specifies the type of the desired converter. 
	(E.g., "BI32", "BFP32", etc.)

2001-01-29 23:03  mcoletti

	* sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Utils.cpp: 
	sb_Accessor :
	
	 - Some of the TVP transfers have external DDSH and DDOM modules
	that
	   use mnemonics MDEF and MDOM, respectively, instead of the DDSH
	and
	   DDOM mnemonics.  So added support for those alternative names.
	
	sb_Ddsh.cpp :
	
	 - An attempt to fix a weird bug regarding pedantic checking for
	   propery DDSH TYPE values that failed due to weirdness regarding
	   bogus std::string states.  This was successfully repaired in
	   sb_Utils.  (I.e., used string.assign() instead of operator=(). 
	I
	   left the change in place since it was semantically identical.)
	
	sb_Utils.cpp :
	
	 - In sb_Utils::valid_domain(), occasionally the val string would
	be
	   in a weird state such that it was impossible for what was really
	a
	   valid domain to be indicated as such.  And so use
	   lexicographical_compare to, by golly, grind through all the
	proper
	   domain strings to determine whether the strings are indeed
	   identical.

2001-01-29 22:55  mcoletti

	* tests/Makefile.am, tests/sb_accessor_t.cpp: Added formal
	compile/link stuff for sb_ddsh_t

2001-01-29 19:33  mcoletti

	* tests/Makefile.am, tests/sb_accessor_t.cpp, tests/sb_ddom_t.cpp:
	Added DDOM test driver

2001-01-26 05:37  mcoletti

	* tests/sio_Reader_t.cpp: 
	Again, added this guy back in as it exercises salient features of
	sio_8211Reader that aren't exercised in "contrib/prsdts".  Moreover
	make use of Electric Fence to check for problems.

	* tests/Makefile.am, tests/sb_accessor_t.cpp: 
	Added more modules to check for in the sb_Accessor test.  It will
	try to crack open ALL the datasets mentioned in the given CATD and
	blat them to cout.
	
	Note that there appears to be a problem reading the DDOM module,
	which I'll look into shortly.
	
	I've also added back in the sio_Reader_t.cpp, which became
	contrib/prsdts, just so that I could run Electric Fence tests on it
	and otherwise exercise certain parts of the sio_Reader interface
	that didn't get exercised in prsdts.

	* sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_Reader.cpp: 
	sio_8211DR :
	
	  - Corrected an odd bug whereby the streamExtract() member would
	    sometimes fail to update the leader pointer that was part of
	its
	    sio_8211Directory member.  Rather, sometimes this value would
	get
	    weirdly masked during the call to istr>>( ifstream & ,
	    sio_8211Directory & ).
	
	sio_Reader :
	
	  - Corrected a read-past-end-of-data bug where we erroneously
	check
	    for unit or field terminators even if the current data position
	is
	    outside the current, or even beyond the end of the file
	
	sio_8211Record :
	
	  - just added a blank line for aesthetic reasons

2001-01-26 05:34  mcoletti

	* sdts++/builder/sb_Accessor.cpp: 
	Added additional check that the current module was done before
	trying to get the current record.  This hopefully contributed to a
	spurious bug with multiple record modules.

2001-01-19 18:51  mcoletti

	* sdts++/container/sc_Field.cpp, sdts++/container/sc_Field.h,
	sdts++/container/sc_Module.cpp, sdts++/container/sc_Module.h,
	sdts++/container/sc_Record.cpp, sdts++/container/sc_Record.h: More
	container sub-system interface cleanup

2001-01-19 17:30  mcoletti

	* sdts++/container/sc_Record.cpp, sdts++/container/sc_Record.h:
	Removed sc_Record ctors and dtor because they didn't do anything. 
	The default compiler supplied equivalents should be adequate.

2001-01-18 22:50  mcoletti

	* sdts++/builder/sb_Cats.cpp, tests/Makefile.am,
	tests/sb_cats_t.cpp: 
	For some odd reason all the THEM fields for the CATS module had
	source commented out.  Uncommented source so that field works
	again.
	
	Added test driver which should have been there all along.

2001-01-11 18:33  mcoletti

	* README, configure.in, contrib/mksdts/Makefile.am,
	contrib/mkstat/Makefile.am, contrib/pr8211/Makefile.am,
	contrib/prsdts/Makefile.am, sdts++/Makefile.am, tests/Makefile.am,
	tests/sb_line_t.cpp: 
	Now use automake MAINTAINER_MODE variable to toggle on libtool
	shared library behavior.  Yes, you can still use --disable-shared,
	but that somehow messes up the file and line number information
	that's embedded in the generated binaries.  This makes debugging
	difficult as the debugger gets confused on where to go to find the
	source for the current line of execution.

2001-01-10 21:29  mcoletti

	* sdts++/builder/sb_Line.cpp: 
	Fixed bug whereby the a sc_Field iterator wasn't getting
	incrementing when reading repeating fields in sb_Line::setRecord().

2001-01-10 18:37  mcoletti

	* sdts++/container/sc_Field.h: 
	FINALLY got annoyed with the silly set*() and get*() naming
	convention that I added new members mnemnonic() and name() that
	either set or get their respective values based on how they're
	used.  The old names are kept for backward compatibility.

	* sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h: 
	sb_ForeignID :
	
	  Made some members const that should have been const all along.
	
	sb_Line :
	
	  Finally finished implementation.  Now verifying through its
	  corresponding test driver, ../tests/sb_line_t.cpp.

2001-01-08 23:47  mcoletti

	* sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp: 
	Intermediate commit.
	
	Rolling forward changes from interface to implementation.

2001-01-08 20:18  mcoletti

	* sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_Line.h,
	sdts++/builder/sb_Rsdf.cpp, sdts++/builder/sb_Rsdf.h: 
	Dealing with gross design oversite with regards to repeating
	fields.  The current interface erroneously presumed that only
	single attribute and foreign ID values would be used where certain
	fields can be repeated.
	
	Changed foreign_ids type to sb_ForeignIDs and propogated forward
	that change to sb_Rsdf.{h,cpp}.
	
	Added sb_AttributeIDs type to sb_ForeignID.h.
	
	Note that the sb_Line.cpp implementation file hasn't had the
	changes rolled forward yet.  Keith and I will be reviewing the
	changes I made to the header before I proceed with the changes in
	that implementation file.

2000-12-04 21:02  mcoletti

	* sdts++/builder/sb_Iden.cpp, sdts++/builder/sb_Iden.h: 
	Ctor sc_Record argument should be const.

2000-11-20 20:50  mcoletti

	* sdts++/builder/sb_Accessor.cpp: 
	Today's lesson was on dirname() and the fact that it can be
	destructive on its string argument.

2000-11-19 20:48  mcoletti

	* sdts++/io/sio_Reader.cpp, sdts++/io/sio_Reader.h: 
	Made converters const, as they should have been all along.  Mea
	culpa!

	* tests/sb_accessor_t.cpp: 
	Added test for new fileName() member.

2000-11-19 20:36  mcoletti

	* sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Accessor.h: 
	Save the CATD file name and allow for getting its value.

2000-11-14 16:01  mcoletti

	* configure.in: 
	Removed commented out stupid line to manually set C++ compiler;
	that was already being done.

2000-11-03 20:02  mcoletti

	* sdts++/Makefile.am: 
	Added include line for Boost C++ libraries

	* ChangeLog: 
	synched change log with CVS log messages

2000-10-31 04:06  mcoletti

	* configure.in: 
	Better handles search for Boost C++ headers.  User can manually
	specify odd location via --with-boost configure script command line
	option.

2000-09-28 22:28  mcoletti

	* sdts++/builder/sb_Module.cpp, sdts++/builder/sb_Module.h: Added a
	conveneince function to create a sb_ForeignID for the curent module
	and record number of a given builder module.

2000-09-25 04:10  mcoletti

	* sdts++/builder/sb_Accessor.cpp: 
	o now uses boost::share_ptr instead of built-in replacement for
	std::auto_ptr
	
	Notes:
	
	This was a by-product of hunting down a bug in the viewer.  I
	noticed that auto_ptr had finally made it into the g++ library, so
	I decided to use that.	It wouldn't compile, though; but the errors
	reminded me of a thread in the SDTS software mailing list some time
	ago where one of the participants remarked that the auto_ptr wasn't
	intended to be used they way it was being used in sb_Accessor. 
	Well, the compiler error was just enforcing his point.	So, now I
	used boost::shared_ptr.
	
	Now the problem may be a memory related error.	sb_Accessor won't
	load the IREF module for the viewer when sdts++ is compiled with
	optimization; but will without optimization.  I'll have to sic
	Purify on it.

2000-09-19 23:30  mcoletti

	* sdts++/container/sc_Subfield.cpp, sdts++/container/sc_Subfield.h,
	tests/sc_Subfield_t.cpp: 
	Added convenience functions getInt(), getFloat(), and getDouble(). 
	These spare the programmer of having to check for a given
	sc_Subfield's type first to know when get*() member to invoke to
	get a subfield's actual numeric value.	(Presuming, of course, that
	the sc_Subfield object contains a numeric in the first place.  If
	not, then these functions will return false.)
	
	Note that these will do implicit casts.  So if an sc_Subfield
	contains an unsigned integer and you invoke getFloat(), it will
	convert that unsigned integer to a float.  This may create some
	problems to do type conversions, so use with caution.

2000-09-19 17:35  mcoletti

	* tests/Makefile.am: 
	Had the wrapper script for sb_line_t take care of running the test
	iff there exists a sample LINE module to read from.

2000-09-18 23:09  mcoletti

	* doc/sdts++.texi, sdts++/builder/sb_Ddsh.cpp: Gave credit for
	Michal Kracik for pointing out the use of an ugly C-ism in
	sb_Iden.cpp.  Except that that had been repaired in 1.0.4.1; but
	there still was one in sb_Ddsh.cpp.  THAT I fixed and will be in
	subsequent releases.

2000-09-18 22:42  mcoletti

	* configure.in: Added check for Boost C++ classes in configure
	script.

2000-09-18 17:59  mcoletti

	* sdts++/container/sc_Subfield.h: corrected comment -- BFP32 and
	BFP64 have been supported for some time

2000-09-03 18:44  mcoletti

	* sdts++/builder/sb_Line.cpp: 
	SADR records are now correctly read in.
	
	  1. Added loop for repeating SADR fields found in sc_Record.
	
	  2. Now clear the spatial address container between invocations so
	     that spatial addresses didn't erroneously accumulate between
	LINE
	     records.

2000-09-03 06:20  mcoletti

	* sdts++/builder/sb_Line.cpp, tests/sb_line_t.cpp: sb_Line :
	
	  At last, we now appear to be reading in most everything, except
	for
	  SADR.  The latter I've got a test case that works for the first
	  (X,Y) pair; now that I've verified that works, it should be
	trivial
	  to scale up for all the SADR records.
	
	sb_line_t :
	
	   Added assert to abort if creating the sb_Line from the record
	fails.

2000-09-01 22:14  mcoletti

	* sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp: sb_ForeignID :
	
	 - added assign() which will take a an sc_Subfield that allegedly
	   contains a foreign identifier and assign those values to the
	   current sb_ForeignID.
	
	sb_Line.cpp :
	
	 - now setRecord() actually assigned foreign id values
	
	Notes:
	
	 Still doesn't seem to be properly propogating values.

2000-09-01 20:00  mcoletti

	* sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h,
	sdts++/builder/sb_Utils.cpp: 
	sb_Utils :
	
	  - add foreign identifier member implemented
	
	sb_Line :
	
	  - getRecord() ... works.  Sorta.
	
	  - need to finish setRecord() and determine why not all fields are
	    getting proper values
	
	  - attribute related members now use sb_AttributeID instead of
	sb_ForeignID
	
	sb_ForeignID :
	
	  - added ctor to sb_AttributeID that accepts module and mnemonic
	strings

2000-09-01 17:19  mcoletti

	* sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Utils.cpp,
	sdts++/builder/sb_Utils.h: 
	sb_ForeignID :
	
	 - added name and mnemonic states to be used for 8211 DDR tags
	 - adjusted ctors to accomodate new states
	 - sb_AttributeID now uses default name and mnemonic states
	 - sb_ForeignID now uses default name and mnemonic states
	
	sb_Utils :
	
	 - added more convenience functions for adding fields, subfields,
	and
	   foreign identifiers
	
	sb_Line :
	
	 - ongoing work incorporating foreign identifier stuff; focusing on
	   getRecord(), which is still incomplete

2000-09-01 03:11  mcoletti

	* sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Spatial.h: 
	sb_Spatial :
	
	  - added print operator
	
	sb_Line :
	
	  - comment for getRecord() to finish implementation, especially
	with
	    regards to spatial addresses

2000-09-01 03:07  mcoletti

	* sdts++/container/sc_Subfield.h: isUnvalued() made a const member.

2000-09-01 02:07  mcoletti

	* sdts++/builder/sb_Line.cpp: Implemented string versions of
	foreign id related member functions.

2000-08-31 21:15  mcoletti

	* sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h: Implemented
	inherited virtual functions.

	* tests/Makefile.am, tests/sb_line_t.cpp, tests/sh_Line_t: Enabled
	sb_Line test driver.  Re-wrote from Chad Slaughter's initial cut. 
	Intermediate version; there are still some issues to be worked out
	with the base sb_Line implementation.  Specifically with regards to
	dealing with foriegn identifiers and how to cleanly manipulate them
	from inside builder objects.  Will hopefully resolve this tonight.

2000-08-11 11:05  mcoletti

	* sdts++/builder/sb_Spatial.h, tests/sl_String_t.cpp: sb_Spatial :
	
	  - Added assign() members to handle (x,y,z) in addition to (x,y).
	  - Added a default sc_Subfield::SubfieldType that's used to set
	the
	    SDTS representation
	  - Added members to get and set this default SDTS subfield type
	
	sl_String_t :
	
	  - sb_Spatial changes propogated forward

2000-08-08 23:54  mcoletti

	* sdts++/builder/sb_Line.cpp: 
	Now actually ingest SADR values from an sc_Record containing line
	module values.	(Though the foreign IDs are still ignored for now.)

	* TODO: 
	Elaborating on builder to do items.

2000-08-08 23:39  mcoletti

	* sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h,
	sdts++/builder/sb_Spatial.h: sb_Spatial :
	
	  Defined a convenient typedef, sb_Spatials, for a container
	sb_Spatial.
	
	sb_Line :
	
	  The spatial address related members now use sb_Spatials.  Sorta.
	  Still have to do a lot to properly hook in foreign identifiers
	and
	  spatials addresses.

2000-08-08 23:08  mcoletti

	* tests/sb_Spatial_t.cpp: 
	Added tests for the settable x() and y().

2000-08-08 23:03  mcoletti

	* tests/Makefile.am: 
	Added sb_Spatial_t, test driver for sb_Spatial.

	* tests/sb_Spatial_t.cpp: sb_Spatial class test driver

	* sdts++/io/sio_8211Converter.h: 
	Enhanced some of the inline documentation.

	* sdts++/container/sc_Subfield.h: 
	Added isUnvalued() to complement setUnvalued().
	
	Enhanced some of the inline documentation.

	* sdts++/builder/sb_Spatial.h: 
	Now uses sc_Subfields instead of floats to hold values.  This
	should make it easier to slosh values from and to 8211 space.

2000-08-08 21:17  mcoletti

	* tests/sb_ForeignID_t.cpp: 
	sb_ForeignID test driver now thoroughly exercises the class API.

2000-08-08 20:47  mcoletti

	* tests/sb_ForeignID_t.cpp: 
	  - removed superfluous "get" and "set" prefixes
	  - added more checks.
	
	Still need to exercise more of the API.  Adding now.

	* sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Rsdf.cpp: 
	sb_ForeignID :
	
	  - removed superfluous "get" and "set" prefixes [1]
	  - default ctor now sets sensible default values
	  - copy ctor now copies usage_t pararmeter
	  - ctor that takes parameters now has default value for third,
	usag_t
	    parameter
	
	sb_Line, sb_Rsdf :
	
	  - rolled forward sb_ForeignID API changes
	
	Notes:
	
	  [1] These are a pet peeve of mine.  "Get" and "set" functionality
	      should be implicit from member function semantics.

2000-08-08 06:36  mcoletti

	* README, doc/SDTS++FAQ, sdts++/Makefile.am,
	sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h,
	tests/Makefile.am, tests/sb_ForeignID_t.cpp: 
	README :
	
	  Updated obsolete reference to "doc/MANUAL" to refer to the FAQ or
	  GNU info page instead.
	
	sb_ForeignID, sb_ForeignID_t :
	
	  This class is in the middle of a revamp.  Now better supports
	notion
	  of optional usage class.  Test driver added, though needs to be
	  extended to fully exercise the interface.
	
	sb_Line :
	
	  Still working on making this functional.  Working in tandem with
	  sb_ForeignID changes as this class is reliant on foreign
	  identifiers.	Then comes the hideousness of dealing with spatial
	  addresses, which won't be elegant.  (Mostly because the way SDTS
	  deals with this isn't elegant.)

2000-08-06 18:54  mcoletti

	* sdts++/logical/Makefile.am: Oops!  forgot to add the automake
	file.

2000-08-01 21:32  mcoletti

	* tests/sb_ForeignID_t.cpp: Added sb_ForeignID test driver.

	* sdts++/builder/sb_Line.cpp, sdts++/builder/sb_Line.h: First cut
	at sb_Line class.  Still have work to do, particularly in resolving
	foreign IDs and SADRs.

	* sdts++/Makefile.am, sdts++/builder/Makefile.am,
	sdts++/builder/mkheader.pl, sdts++/builder/mkimp.pl,
	sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	tests/Makefile.am: 
	Intermediate commit.  Adding sb_Line class.  Extending
	sb_ForeignID.

2000-07-28 20:32  mcoletti

	* sdts++/builder/sb_Accessor.cpp: The accessor now checks if the
	stream is valid and if the sio_8211ForwardIterator starts in a good
	state.	Failing either of those, the sb_Accessor returns false.

2000-07-25 21:56  mcoletti

	* sdts++/builder/sb_Accessor.h: _Finally_ got the right syntax for
	generating a todo list item (very nice doxygen feature, that) and
	ancillary note text.

	* doc/sdts++.doxygen: Turned off LaTeX and man page generation for
	default documentation.	Synched with latest version of doxygen.

2000-07-25 20:04  mcoletti

	* sdts++/builder/sb_Accessor.h, sdts++/builder/sb_At.h,
	sdts++/builder/sb_Catd.h, sdts++/builder/sb_Cats.h,
	sdts++/builder/sb_Cell.h, sdts++/builder/sb_Ddom.h,
	sdts++/builder/sb_Ddsh.h, sdts++/builder/sb_Dq.h,
	sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_Iden.h,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.h,
	sdts++/builder/sb_Module.h, sdts++/builder/sb_Rsdf.h,
	sdts++/builder/sb_Spatial.h, sdts++/builder/sb_Stat.h,
	sdts++/builder/sb_Utils.h, sdts++/builder/sb_Xref.h,
	sdts++/container/sc_Field.h, sdts++/container/sc_Module.h,
	sdts++/container/sc_MultiTypeValue.h, sdts++/container/sc_Record.h,
	sdts++/container/sc_Subfield.h, sdts++/io/sio_8211Converter.h,
	sdts++/io/sio_8211DDR.h, sdts++/io/sio_8211DDRField.h,
	sdts++/io/sio_8211DDRLeader.h, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_8211DRLeader.h, sdts++/io/sio_8211DirEntry.h,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_8211Field.h,
	sdts++/io/sio_8211FieldArea.h, sdts++/io/sio_8211FieldFormat.h,
	sdts++/io/sio_8211Leader.h, sdts++/io/sio_8211Record.h,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_8211Utils.h,
	sdts++/io/sio_Buffer.h, sdts++/io/sio_Converter.h,
	sdts++/io/sio_Error.h, sdts++/io/sio_Reader.h,
	sdts++/io/sio_Utils.h, sdts++/io/sio_Writer.h,
	sdts++/logical/sl_Chain.h, sdts++/logical/sl_Node.h,
	sdts++/logical/sl_Object.h, sdts++/logical/sl_Point.h,
	sdts++/logical/sl_Polygon.h, sdts++/logical/sl_Ring.h,
	sdts++/logical/sl_String.h: Changed to be doxygen-friendly.

	* NEWS, configure.in: aclocal.m4 :
	
	  Removed this since this is a generated file.
	
	NEWS, configure.in :
	
	  Starting next release, 1.1a.

	* doc/README, doc/sdts++.doxygen: 
	README :
	
	  Added line item for doxygen file.
	
	sdts++.doxygen :
	
	  Added default doxygen configuration file to generate HTML, LaTeX,
	  and man page documentation.

2000-07-18 18:49  mcoletti

	* doc/SDTS++FAQ: Version 1.0.4.1

2000-06-08 16:55  mcoletti

	* doc/sdts++.texi: Added credit for the Korean GIS student who lead
	me to discovering the documentation problem.

	* doc/sdts++.texi: OOps!  This is an old documentation gaff; the
	mentioned sio_Reader_t.cpp no longer exists.  It has long since
	been reincarnated as a handy little command line utility, prsdts,
	which is located in the contrib directory.  Changed documentation
	to reflect this.

2000-05-02 00:54  mcoletti

	* tests/Makefile.am, tests/sl_Polygon_t.cpp:   Added test driver
	for SDTS logical polygon classes.

	* sdts++/Makefile.am: Added SDTS logical polygon classes.

	* sdts++/logical/sl_Chain.h, sdts++/logical/sl_Polygon.cpp,
	sdts++/logical/sl_Polygon.h: sl_Chain:
	
	  - added reference counted smart pointer type, sl_ChainPtr
	  - use sl_ChainPtr to define heterogenous container of sl_Chains,
	sl_Chains
	
	sl_Polygon:
	
	  Added SDTS logical polygon classes.

2000-05-01 21:19  mcoletti

	* tests/Makefile.am, tests/sl_Chain_t.cpp, tests/sl_Ring_t.cpp:
	Added test driver for new ring classes.

	* sdts++/logical/sl_Chain.h, sdts++/logical/sl_Ring.h: sl_Chain.h :
	
	  - corrected minor cut-n-paste comment error
	
	sl_Ring :
	
	  - now have ring classes [1]
	
	Notes:
	
	  [1] Note that this is the first templated class.  See the inline
	      commentary for why.

2000-05-01 19:54  mcoletti

	* sdts++/logical/sl_Chain.h: Chains now also can have points
	instead of just right/left polygons or start/end nodes.
	
	Notes:
	
	Decided to use a std::deque to store the sb_Points.  See inline
	commentary for why.

2000-04-28 21:48  mcoletti

	* sdts++/logical/sl_Chain.cpp, sdts++/logical/sl_Chain.h,
	sdts++/logical/sl_Object.h: Added chain classes.
	
	Added a reference counted smart pointer type for all sl_Objects. 
	This will be used to implement heterogenous containers of
	sl_Objects.

	* sdts++/Makefile.am: Added chain classes.

	* TODO: Added list of logical layer stuff left to be implemented.

	* tests/Makefile.am, tests/sl_Chain_t.cpp: Added test driver for
	chain classes.

2000-04-28 19:48  mcoletti

	* sdts++/Makefile.am: Added sl_String class.

	* tests/Makefile.am, tests/sl_String_t.cpp: Add test driver for
	SDTS string class.

	* sdts++/logical/sl_String.cpp, sdts++/logical/sl_String.h: Add an
	SDTS string class.

	* sdts++/builder/sb_Spatial.h: Added convenience members for
	setting the coordinates in one call instead of three separate
	calls.

2000-04-28 18:25  mcoletti

	* tests/Makefile.am, tests/sl_Node_t.cpp: Added node test driver.

	* sdts++/Makefile.am: Added node classes.

	* doc/logical.dia: Made Node class abstract.

	* sdts++/logical/sl_Node.cpp, sdts++/logical/sl_Node.h,
	sdts++/logical/sl_Point.h: Added node classes.	Corrected comment
	typo in sl_Point.h.

2000-04-28 18:11  mcoletti

	* tests/sl_Point_t.cpp:   - added tests for area, entity, and label
	points

	* sdts++/logical/sl_Object.h, sdts++/logical/sl_Point.cpp,
	sdts++/logical/sl_Point.h: sl_Object:	- added virtual destructor,
	which is needed for classes that have children
	
	sl_Point:   - also added a virtual destructor	- added classes for
	area, entity, and label points

2000-04-27 20:50  mcoletti

	* tests/Makefile.am: changes for new source

	* tests/sl_Point_t.cpp: Start of test driver for sl_Point. 
	Currently only exercises the code() member.

	* sdts++/logical/sl_Point.h: Corrected the #includes to reflect
	state as if sdts++ was already installed.

	* configure.in: Added logical layer source directory to the GNU
	autoconf configure script.

	* doc/logical.dia, doc/logical.eps: Added some notes to explain
	some of the weirdness with regards to polygons.  consisting of
	either one of two different aggregate types.

2000-04-27 20:31  mcoletti

	* sdts++/logical/sl_Object.h, sdts++/logical/sl_Point.cpp,
	sdts++/logical/sl_Point.h: Added first cut at these primitives.

	* sdts++/Makefile.am: Added logical layer source.

	* sdts++/builder/sb_Spatial.h: Forgot to make public members, well,
	public.

2000-04-27 19:46  mcoletti

	* sdts++/builder/Makefile.am, sdts++/builder/sb_Spatial.h: Added
	class to hold SDTS spatial values.

2000-04-25 18:01  mcoletti

	* doc/logical.dia, doc/logical.eps, doc/sdts++.texi: sdts++.texi :
	
	 - changed an e-mail address to make texinfo happy
	
	logical.{dia,eps} :
	
	 - UML diagram for new logical primitives; first cut!

1999-11-22 19:00  mcoletti

	* contrib/prsdts/prsdts.cpp: Corrected #include path.

1999-11-19 19:45  mcoletti

	* README, doc/SDTS++FAQ, doc/sdts++.texi: Added comments that
	applying service packs required before trying to use sdts++ with
	Visual C++.  Gave credit for this to Alexander Gavrilov.

1999-11-12 23:04  mcoletti

	* NEWS, README, TODO, doc/SDTS++FAQ, doc/sdts++.texi: - updated for
	release 1.0.4

	* ChangeLog: Release 1.0.4 commentary.

1999-11-12 22:16  mcoletti

	* Windows/sdtsxx/sdtsxx.dsp: Now uses same flex/bison generated
	files as on unix side.

1999-11-12 21:40  mcoletti

	* sdts++/io/FormatLexer.c, sdts++/io/FormatParser.c,
	sdts++/io/FormatParser.h: Even those these are generated by flex
	and bison, these need to show up for Visual C++ to see them.  I
	could generated these by hand or try and coerce VC++ to do so. 
	However, either option are not particular attractive.

1999-11-12 20:21  mcoletti

	* Makefile.am, configure.in: - release 1.0.4 in configuration file
	- Windows directory now included in distribution

	* Windows/Makefile.am: Added automake file so that the make dist
	rule would work.

1999-11-10 00:42  mcoletti

	* Windows/getopt.c, Windows/getopt.dsp, Windows/getopt.h,
	Windows/unistd.h, Windows/sb_accessor_t/sb_accessor_t.dsp,
	Windows/sb_catd_t/sb_catd_t.dsp, Windows/sc_Field_t/sc_Field_t.dsp,
	Windows/sc_MultiTypeValue_t/sc_MultiTypeValue_t.dsp,
	Windows/sc_Subfield_t/sc_Subfield_t.dsp, Windows/sdtsxx/sdtsxx.dsp,
	Windows/sio_8211Converter_t/sio_8211Converter_t.dsp,
	Windows/sio_8211DDRField_t/sio_8211DDRField_t.dsp,
	Windows/sio_8211DDRLeader_t/sio_8211DDRLeader_t.dsp,
	Windows/sio_8211DDR_t/sio_8211DDR_t.dsp,
	Windows/sio_8211DRLeader_t/sio_8211DRLeader_t.dsp,
	Windows/sio_8211DR_t/sio_8211DR_t.dsp,
	Windows/sio_8211DirEntry_t/sio_8211DirEntry_t.dsp,
	Windows/sio_8211FieldFormat_t/sio_8211FieldFormat_t.dsp,
	Windows/sio_8211Field_t/sio_8211Field_t.dsp,
	Windows/sio_8211SubfieldFormat_t/sio_8211SubfieldFormat_t.dsp,
	Windows/sio_8211_t/sio_8211_t.dsp,
	Windows/sio_Buffer_t/sio_Buffer_t.dsp,
	Windows/sio_Error_t/sio_Error_t.dsp,
	Windows/sio_ReadWrite_t/sio_ReadWrite_t.dsp,
	Windows/sio_Writer_t/sio_Writer_t.dsp: Added Windows directory and
	VC++ project files as well as getopt and unistd headers for UNIX
	compatibility.

1999-11-10 00:34  mcoletti

	* Windows/container_t/container_t.dsp: Added Windows directory and
	VC++ project files as well as getopt and unistd headers for UNIX
	compatibility.

1999-11-09 23:53  mcoletti

	* sdts++/builder/sb_At.cpp, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Dq.cpp, sdts++/builder/sb_Iref.cpp,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Utils.cpp, sdts++/builder/sb_Xref.cpp,
	sdts++/container/sc_Field.cpp, sdts++/container/sc_Field.h,
	sdts++/io/sio_8211FieldFormat.cpp, sdts++/io/sio_Error.cpp,
	sdts++/io/sio_Reader.h: Eliminated many VC++ warnings.

1999-11-09 22:46  mcoletti

	* sdts++/builder/sb_Accessor.cpp: dirname could have returned
	without a value ... corrected

1999-11-03 14:58  mcoletti

	* sdts++/io/FormatLexer.ll, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h, tests/sio_ReadWrite_t.cpp: Compensated for
	VC++ changes; now to propogate those back to VC++ to see what I
	broke there.

1999-11-02 21:52  mcoletti

	* doc/sdts.ood, sdts++/builder/sb_Accessor.cpp,
	sdts++/builder/sb_Cell.cpp, sdts++/builder/sb_Ddom.cpp,
	sdts++/builder/sb_Iref.cpp, sdts++/builder/sb_Module.cpp,
	sdts++/builder/sb_Module.h, sdts++/builder/sb_Utils.cpp,
	sdts++/container/sc_Field.h, sdts++/container/sc_Record.h,
	sdts++/container/sc_Subfield.h, sdts++/io/FormatLexer.ll,
	sdts++/io/FormatParser.yy, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_8211DDRField.h, sdts++/io/sio_8211DirEntry.cpp,
	sdts++/io/sio_8211DirEntry.h, sdts++/io/sio_8211Field.h,
	sdts++/io/sio_8211FieldFormat.h, sdts++/io/sio_8211Leader.h,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h, sdts++/io/sio_Reader.h,
	tests/sb_accessor_t.cpp, tests/sb_catd_t.cpp,
	tests/sc_Subfield_t.cpp, tests/sio_8211_t.cpp,
	tests/sio_ReadWrite_t.cpp: Made VC++ friendly.

1999-10-29 00:35  mcoletti

	* sdts++/builder/sb_Accessor.cpp: s/_isDir/isDir_/

1999-10-02 17:18  mcoletti

	* sdts++/builder/sb_At.cpp: Some underscores didn't make it through
	-- more identifiers now have the underscores properly on the end.

1999-10-01 22:22  mcoletti

	* sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Accessor.h,
	sdts++/builder/sb_At.cpp, sdts++/builder/sb_At.h,
	sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h,
	sdts++/builder/sb_Cats.cpp, sdts++/builder/sb_Cats.h,
	sdts++/builder/sb_Cell.cpp, sdts++/builder/sb_Cell.h,
	sdts++/builder/sb_Ddom.cpp, sdts++/builder/sb_Ddom.h,
	sdts++/builder/sb_Ddsh.cpp, sdts++/builder/sb_Ddsh.h,
	sdts++/builder/sb_Dq.cpp, sdts++/builder/sb_Dq.h,
	sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_ForeignID.h,
	sdts++/builder/sb_Iden.cpp, sdts++/builder/sb_Iden.h,
	sdts++/builder/sb_Iref.cpp, sdts++/builder/sb_Iref.h,
	sdts++/builder/sb_Ldef.cpp, sdts++/builder/sb_Ldef.h,
	sdts++/builder/sb_Module.cpp, sdts++/builder/sb_Rsdf.cpp,
	sdts++/builder/sb_Rsdf.h, sdts++/builder/sb_Stat.cpp,
	sdts++/builder/sb_Stat.h, sdts++/builder/sb_Utils.cpp,
	sdts++/builder/sb_Xref.cpp, sdts++/builder/sb_Xref.h,
	sdts++/container/sc_Field.cpp, sdts++/container/sc_Field.h,
	sdts++/container/sc_MultiTypeValue.cpp,
	sdts++/container/sc_MultiTypeValue.h,
	sdts++/container/sc_Subfield.cpp, sdts++/container/sc_Subfield.h,
	sdts++/io/sio_8211Converter.cpp, sdts++/io/sio_8211Converter.h,
	sdts++/io/sio_8211DDR.cpp, sdts++/io/sio_8211DDR.h,
	sdts++/io/sio_8211DDRField.cpp, sdts++/io/sio_8211DDRField.h,
	sdts++/io/sio_8211DDRLeader.cpp, sdts++/io/sio_8211DDRLeader.h,
	sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_8211DRLeader.cpp, sdts++/io/sio_8211DirEntry.cpp,
	sdts++/io/sio_8211DirEntry.h, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_8211Field.h, sdts++/io/sio_8211FieldFormat.cpp,
	sdts++/io/sio_8211FieldFormat.h, sdts++/io/sio_8211Leader.cpp,
	sdts++/io/sio_8211Leader.h, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_8211Record.h, sdts++/io/sio_8211SubfieldFormat.cpp,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h, sdts++/io/sio_Error.cpp,
	sdts++/io/sio_Error.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h, sdts++/io/sio_Writer.cpp,
	sdts++/io/sio_Writer.h: 
	All names that began with underscores, now end in them.
	
	Notes:
	
	According to the ISO C++ spec, symbols with leading underscores are
	reserved for implementors.

1999-10-01 18:58  mcoletti

	* sdts++/Makefile.am, tests/sh_8211_t, tests/sh_Accessor_t,
	tests/sh_Cell_t, tests/sh_ReadWrite_t, tests/sh_Writer_t: Solaris
	doesn't like 'test -e', so we use test -r intead.

1999-10-01 16:34  mcoletti

	* contrib/mkstat/mkstat.cpp: basename() and dirname() require
	non-const arguments, so I had to do a const_cast<char*> for these
	function calls.

1999-09-26 23:55  mcoletti

	* Makefile.am, configure.in: Fixed automake problem of contrib dir
	not getting properly added to dist tar file.

1999-09-26 22:23  mcoletti

	* ChangeLog, NEWS, README, configure.in, doc/SDTS++FAQ:
	Documentation changes for version 1.0.3.3.

1999-09-26 22:10  mcoletti

	* Makefile.am, configure.in, contrib/Makefile.am,
	contrib/mksdts/Makefile.am, contrib/mkstat/Makefile.am,
	contrib/pr8211/Makefile.am, contrib/prsdts/Makefile.am: The contrib
	directory is now not buildable from the main make file; instead,
	the user will have to go into the desired contrib application
	directory and build from there.
	
	Notes:
	
	This mitigates linking issues on some machines where the executable
	will be dynamically bound to the sdts++ dynamic lib in the build
	directory and not in the installation directory.  This mean that
	such applications as ``mksdts'' would fail when run once the build
	directory is removed.

1999-09-26 21:53  mcoletti

	* sdts++/builder/sb_Dq.cpp: Added missing schema_() and
	buildSpecificSchema_() functions.
	
	Notes:
	
	Thanks to a stale dynamic library, I didn't catch this until
	testing a final distribution.

1999-09-24 16:39  mcoletti

	* configure.in: Now add "-lgen" to LIBS variable if that library
	exists.  This library will contain the dirname() and basename()
	functions.
	
	Notes:
	
	  IRIX defines this, but I don't know of any other OS's currently
	that also do so.

1999-09-03 17:48  mcoletti

	* ChangeLog: Added log messages for 1.0.3.2.

1999-09-03 17:34  mcoletti

	* configure.in: Ooops.	Forgot to change the version number here.

1999-09-03 17:29  mcoletti

	* NEWS, README, doc/SDTS++FAQ: Version 1.0.3.2

1999-09-03 17:25  mcoletti

	* TODO, configure.in, contrib/mkstat/mkstat.cpp,
	contrib/prsdts/prsdts.cpp, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_8211Directory.cpp, sdts++/io/sio_8211Directory.h,
	tests/Makefile.am, tests/sb_catd_t.cpp, tests/sb_cell_t.cpp,
	tests/sc_Subfield_t.cpp, tests/sh_Cell_t,
	tests/sio_8211FieldFormat_t.cpp, tests/sio_ReadWrite_t.cpp: - Now
	compiles with gcc 2.95.1 [1]
	
	- All tests now run without failing [2]
	
	- Eliminated some superflous output from some of the test drivers.
	
	Notes:
	
		[1] Apparently gcc 2.95.1 is a little pedantic about
	errors.
		For one thing, it doesn't allow implicit const-away
	castings,
		which is a goodism.
	
		[2] Specifically, the cell builder class test expects a
	sample
		CELL module.  Since existings ones are rather large, I've
	not
		included a test one in the official sdts++ distribution.
		However, there exists a test driver for the CELL builder
		class, which _should_ be included in the distribution.	So,
	I
		added a wrapper shell script that will run that driver iff
		there exists a given CELL module sample file.  Otherwise,
	it
		just skips the check.
	
		In the future, I hope to hand generate a sample CELL module
		and include it with the distribution.  I added a TODO line
		item stating that.

1999-08-29 23:34  mcoletti

	* NEWS: Added 1.0.3.1 changes.

	* ChangeLog: This file now automagically generated courtesy of
	cvs2cl.pl.
	
	For more information on cvs2cl.pl, surf to:
	
	http://www.red-bean.com/~kfogel/cvs2cl.shtml

1999-08-29 23:14  mcoletti

	* doc/SDTS++FAQ: Some minor re-formatting.  Now use `|' to indicate
	new or changed text.

1999-07-20 19:29  mcoletti

	* doc/SDTS++FAQ: Added blurb about available documentation,
	including >>NEW<< online documentation.

1999-07-20 18:02  mcoletti

	* doc/Makefile.am: Added generated HTML file.  This file will
	automatically regenerate if the original GNU texinfo file is
	modified; however, this requires the texi2html utility.  This
	utility is freeware that can be garnered from
	``http://wwwinfo.cern.ch/dis/texi2html/''.

1999-07-20 17:44  mcoletti

	* doc/sdts++.texi: Added my e-mail addreses in the title page.

1999-07-20 17:38  mcoletti

	* doc/sdts++.texi: Added credit for David Weller, who pointed out
	that the FAQ wasn't included in the distribution and that the
	generated HTML was horrid.

1999-07-20 17:26  mcoletti

	* ChangeLog, README, doc/SDTS++FAQ: Updating ancillary
	documentation to reflect version change.

1999-07-20 17:11  mcoletti

	* configure.in: Moved to version 1.0.3.1 as I made trivial change
	to documentation.  Also note that this is a pre-release for 1.0.4,
	which fixes a number of write related bugs.

1999-07-20 17:04  mcoletti

	* TODO, doc/Makefile.am, doc/README: Adding FAQ and Object Domain
	diagrams to distribution via automake.

1999-07-07 21:07  mcoletti

	* sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h,
	sdts++/builder/sb_Ddom.h: sb_Catd :
	
	  - ripped out superfluous RECD subfield
	
	sb_Ddom :
	
	  - un-pure'd buildSpecificSchema; i.e., fixed a cut-n-paste error

1999-07-06 14:52  mcoletti

	* sdts++/io/sio_8211Converter.cpp: Fixed bug in
	sio_8211Converter_BFP32::makeFixedSubfield() whereby the data
	wasn't getting properly copied before converting from network byte
	order to native byte order.

1999-07-02 23:08  mcoletti

	* TODO, sdts++/io/FormatParser.yy, sdts++/io/sio_Reader.cpp,
	tests/sio_8211Converter_t.cpp: Added check for BFP32 converter
	which, of course, fails.  :(

1999-07-02 18:39  mcoletti

	* tests/Makefile.am, tests/sio_8211Converter_t.cpp: First version
	of converter test driver.  Only 'A' and 'I' types tested so far.

1999-07-02 17:03  mcoletti

	* sdts++/io/sio_8211Converter.cpp, sdts++/io/sio_8211Converter.h,
	sdts++/io/sio_Converter.h: 
	Now use sc_Subfield reference argument instead of dangerous
	pointer.

1999-07-01 17:30  mcoletti

	* sdts++/builder/sb_Cell.h: Fixed cut-n-paste error.

1999-06-30 22:11  mcoletti

	* sdts++/container/sc_Subfield.cpp: - removed deprecated static
	_isInt() - removed union/long getFPT32() silliness [1]
	
	Notes:
	
	[1] Which was causing completely bogus BFP32 values to be returned.

	* tests/sc_Subfield_t.cpp: Now _completely_ exercise sc_Subfield's
	interface.
	
	Notes:
	
	Did this to resolve bug in 32-bit floating point member functions. 
	Since I was visiting this test driver anyway, I decided to go ahead
	and add in checks for the other subfield types.

1999-06-30 15:45  mcoletti

	* sdts++/container/sc_Subfield.cpp: Fixed bug where the setBFP32
	code was truncating real values.

1999-06-23 17:42  mcoletti

	* sdts++/builder/sb_Cats.h, sdts++/builder/sb_Dq.cpp,
	sdts++/builder/sb_Iref.cpp, sdts++/builder/sb_Iref.h,
	sdts++/builder/sb_Ldef.cpp, sdts++/builder/sb_Ldef.h,
	sdts++/builder/sb_Rsdf.cpp, sdts++/builder/sb_Rsdf.h,
	sdts++/builder/sb_Xref.cpp, sdts++/builder/sb_Xref.h: The rest of
	the builder classes now use the new schema building method.

1999-06-22 22:19  mcoletti

	* sdts++/builder/sb_At.cpp, sdts++/builder/sb_At.h,
	sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h,
	sdts++/builder/sb_Cats.cpp, sdts++/builder/sb_Cats.h,
	sdts++/builder/sb_Cell.h, sdts++/builder/sb_Ddom.cpp,
	sdts++/builder/sb_Ddom.h, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Ddsh.h, sdts++/builder/sb_Dq.cpp,
	sdts++/builder/sb_Dq.h, sdts++/builder/sb_Iden.cpp,
	sdts++/builder/sb_Iden.h, sdts++/builder/sb_Iref.cpp,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Ldef.h, sdts++/builder/sb_Module.cpp,
	sdts++/builder/sb_Module.h, sdts++/builder/sb_Rsdf.cpp,
	sdts++/builder/sb_Rsdf.h, sdts++/builder/sb_Stat.cpp,
	sdts++/builder/sb_Stat.h, sdts++/builder/sb_Xref.cpp,
	sdts++/builder/sb_Xref.h: Intermediate commit.	Continuing to roll
	foward changes necessary for builder classes to emit optional field
	record identifier.  Also, generalized schema generating function
	into sb_Module abstract base class.

1999-06-17 20:09  mcoletti

	* contrib/mksdts/parser.yy: If given a real for an integer
	subfield, mksdts now does The Right Thing (tm) and emits the
	integer equivalent.
	
	Notes:
	
	This fixes the DDOM problem.

1999-06-17 19:48  mcoletti

	* sdts++/builder/sb_Catd.cpp: Uncommented code to support RECD
	subfield.
	
	Notes:
	
	Why was this commented out in the first place?	Was this because of
	a DOQ encoder requirement?

1999-06-17 19:20  mcoletti

	* tests/Makefile.am, tests/sb_catd_t.cpp: Added CATD module test
	driver.

1999-06-16 20:27  mcoletti

	* sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_Writer.cpp: Made all manner of changes to accomodate
	all manner of bizarre repeating field issues.  Specifically, if the
	last subfield of a repeating field is variable length, then emit a
	unit terminator so readers know that more of the same field will
	follow.  Otherwise, if the last subfield is of fixed length, then
	DO NOT emit a unit terminator.

1999-06-14 19:45  mcoletti

	* sdts++/io/sio_8211Record.cpp: Corrected repeating record size
	bug.

1999-06-14 15:32  mcoletti

	* sdts++/io/sio_8211DDRField.cpp: Added zero padding to the record
	identifier field so that dropped leaders and directories now work
	properly.
	
	Note:
	
	I arbitrarily set the field width to be seven.	This is a kludge. 
	In fact, this whole record identifier field business has shown some
	weaknesses in the sdts++ 8211 design.  It didn't scale well to
	handle elementary fields, which is what the record identifier field
	is, in DRs.

1999-06-14 14:56  mcoletti

	* sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_8211Field.h, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h: removed redundant field terminators for
	repeating fields

1999-06-09 23:12  mcoletti

	* tests/sio_ReadWrite_t.cpp: Now accepts a ``-i'' command line flag
	to toggle on use of record identifier field.

1999-06-09 22:45  mcoletti

	* sdts++/io/sio_Writer.cpp: Rolled _addRepeatingField() into
	_addField(); the latter has a new argument, ``isRepeating'', that's
	set to true if a repeating field is to be added to the given DR. 
	This mitigated maintenance problems associated with having two very
	similar functions.
	
	Fixed bug whereby sio_Writer would write an extra unit terminator
	in the last variable length subfield.  This caused SDTS readers
	built on legacy 8211 code, like FIPS123, to mistake the last unit
	terminator for a missing subfield.

	* configure.in: By default, now do build and install the contrib
	applications.
	
	Notes:
	
	My worry here is that EDC would build a later version of sdts++
	that had significant fixes to such utilities as mksdts that were
	previously separately distributed.  They might mistakenly use the
	older, broken version of these utilities.  With this feature turned
	on by default, these utilities will also, by default, be installed.
	 So it'd be more difficult for someone there to mistakenly use an
	older version of these utilities.

1999-06-09 14:44  mcoletti

	* sdts++/builder/sb_At.cpp, sdts++/builder/sb_At.h,
	sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h,
	sdts++/builder/sb_Dq.cpp, sdts++/builder/sb_Dq.h,
	sdts++/builder/sb_Module.cpp, sdts++/builder/sb_Module.h,
	sdts++/builder/sb_Stat.cpp, sdts++/builder/sb_Stat.h: Minimal
	number of builder modules converted to optionally emit record
	identifer field for the DEM/SDTS encoder.

1999-06-07 17:19  mcoletti

	* sdts++/io/sio_8211DDRField.cpp: Previously I had added a unit
	terminator before the field terminator for the record identifier
	reserved field in an effort to appease show173 and its kin. 
	However, this wasn't the problem.  Since this is of dubious ISO
	8211 compliance, I removed the superfluous unit terminator. 
	show173 is still happy!

1999-06-07 17:15  mcoletti

	* contrib/mksdts/parser.yy, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_Writer.cpp: sio_Writer :
	
	  - fixed bug whereby the schema records after an elementary field
	    weren't being processed
	
	  - changed if/else if's into cleaner switch()
	
	  - added #ifdef'd SDTSXXDEBUG block to dump schema just before DDR
	emitted
	
	mksdts :
	
	  - NOW PROPERLY EMITS A DDF THAT SHOW173 CAN DIGEST!
	
	Notes :
	
	  Only superficially tested.  Will implicitly test when integrate
	into
	  DEM and DOQ encoders.  Normally wouldn't do that, but production
	is
	  waiting on me!

1999-06-04 20:12  mcoletti

	* contrib/mksdts/parser.yy: mksdts now emits records with the
	record identfier.  And, yes, show173 _still_ turns up its nose. 
	Back to the drawing board.

1999-06-03 20:31  mcoletti

	* sdts++/io/sio_8211DDRField.cpp, sdts++/io/sio_8211DDRField.h,
	sdts++/io/sio_Buffer.cpp, sdts++/io/sio_Writer.cpp: Now I
	(seemingly) properly generate modules that use record identifer
	fields.  But it's held together by a wonking huge kludge that I'd
	love to eliminate one day.
	
	However, show173 still turns up its nose.  Back to the drawing
	board.

1999-06-02 20:30  mcoletti

	* contrib/mksdts/parser.yy, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_8211DDRField.h, sdts++/io/sio_Writer.cpp: 
	parser.yy :
	
	  - mksdts now accpets a `-r' command line switch that causes
	mksdts
	    to emit the DDF record identifier field for each record [1]
	
	sio_8211DDRField :
	
	  - imbued record identifier class with ability to manage record
	numbers [2]
	
	sio_Writer :
	
	  - if it finds a '0001' field in the current schema, it toggles on
	a
	    mode whereby the DDR record identifier field is emitted with
	each
	    record and is automatically incremented with each
	    sio_8211Writer::put(). [3]
	
	Notes:
	
	  [1] However there's still a bug in that the wrong _data_ for that
	  field is being emitted.  However, this should be (hopefully) easy
	to
	  fix.	Should nail it tomorrow.
	
	  [2] This is the bug.	That class is a DDR Field subclass.  There
	  needs to be an equivalent _DR_ field subclass.  The DDR field
	  version dutifully emits DDR formatting information instead of a
	  record number, which is what it's supposed to do.  D'oh!
	
	  [3] _Seems_ to work, though again it's blatting out the wrong
	data
	  for the DDF record identifier.

1999-05-24 17:49  mcoletti

	* sdts++/io/sio_8211DDRField.cpp, sdts++/io/sio_8211DDRField.h,
	sdts++/io/sio_Writer.cpp: Now can emit reserved field 0001 DDR. 
	Still need to fix mksdts to also write data for that.

1999-05-23 20:42  mcoletti

	* ChangeLog, NEWS, README, configure.in, contrib/mksdts/lexer.ll,
	contrib/mksdts/parser.yy, doc/SDTS++FAQ,
	sdts++/io/sio_8211DDRField.cpp, sdts++/io/sio_8211FieldFormat.h:
	intermediate version

1999-05-19 18:27  mcoletti

	* sdts++/io/sio_8211FieldFormat.cpp: Fixed bug whereby name was
	getting propgated in assignment.

	* tests/sio_8211FieldFormat_t.cpp: Now does tests.  Was previously
	empty!

	* tests/sio_8211DR_t.cpp: Fixed bug whereby FieldEqual comparison
	was missing ``return''.

1999-05-05 19:00  mcoletti

	* ChangeLog, NEWS, README, configure.in, doc/SDTS++FAQ,
	sdts++/io/sio_8211DDRField.cpp: Release 1.0.2.
	
	Fixed serious bug whereby the final unit terminator wasn't getting
	written out to the DDR's "0000" file title field.

1999-04-26 17:49  mcoletti

	* doc/SDTS++FAQ, sdts++/io/sio_8211FieldFormat.cpp: Synched FAQ
	with version, and cleaned up formatting in sio_8211FieldFormat.

1999-04-26 14:47  mcoletti

	* NEWS, configure.in: 1.0.1

1999-04-22 16:16  mcoletti

	* sdts++/io/sio_Reader.cpp: Fixed repeating fields bug.
	
	Notes:
	
	The New Way (tm) of doing things left field terminators in the
	input buffer.  I needed to take that into account when reading
	repeating fields.  Otherwise, the first subfield for every
	subsequent field would get skipped.

1999-04-14 17:45  mcoletti

	* sdts++/io/FormatLexer.ll, sdts++/io/Makefile.am, BUGS, ChangeLog,
	NEWS, README, TODO, configure.in, doc/SDTS++FAQ: Should hopefully
	be 1.0 closeout; fixed bison generated header problem.

1999-04-14 16:58  mcoletti

	* sdts++/io/y.tab.h: Deprecated.

1999-04-13 18:07  mcoletti

	* contrib/mksdts/Makefile.am, contrib/mkstat/Makefile.am,
	contrib/pr8211/Makefile.am, contrib/prsdts/Makefile.am,
	sdts++/Makefile.am, sdts++/io/FormatParser.yy,
	sdts++/io/Makefile.am, tests/Makefile.am: Now works with libtool to
	create shared library version of sdts++ in addition to plain ole
	static version.

	* sdts++/io/formatparser_tab.c, sdts++/io/formatparser_tab.h,
	sdts++/io/lex.sio_8211_yy.c: These files deprecated by recent
	libtool changes.

1999-04-12 03:44  mcoletti

	* sdts++/io/FormatLexer.ll, sdts++/io/FormatParser.yy,
	sdts++/io/Makefile: New parser and lexer file names.

	* sdts++/Makefile.am: Tring to play it automake's way with regards
	to the lexer and parser names.

1999-04-12 00:02  mcoletti

	* sdts++/io/FormatLexer.l, sdts++/io/FormatParser.y: renamed lex
	and yacc files

1999-04-10 17:42  mcoletti

	* Makefile.am, NEWS, TODO, configure.in, contrib/Makefile.am,
	contrib/mksdts/Makefile.am, contrib/mksdts/Makefile.in,
	contrib/mkstat/Makefile.am, contrib/pr8211/Makefile.am,
	contrib/prsdts/Makefile.am, sdts++/Makefile, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/container/Makefile, sdts++/io/Makefile, tests/Makefile.am,
	tests/Makefile.in: Added support for shared libraries.

1999-04-10 16:55  mcoletti

	* sdts++/builder/sb_Cell.h: Eliminated const_cast warning and added
	copious commentary for that.

1999-04-10 16:14  mcoletti

	* Makefile.am, configure.in, contrib/mksdts/Makefile.in,
	sdts++/Makefile, sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.in, sdts++/container/Makefile,
	sdts++/container/Makefile.in, sdts++/io/Makefile,
	sdts++/io/Makefile.in, sdts++/io/sio_8211Leader.cpp,
	tests/Makefile.in: removed files that are created by other
	utilities

1999-04-08 22:32  mcoletti

	* sdts++/builder/sb_Cell.h: Search for "CELL" field mnemonic, not
	"CEL0".

	* tests/sb_cell_t.cpp: Souped up to take converter parameters and
	to otherwise properly specify a converter when reading a CELL
	module.

	* README, COPYING: Updating these files in anticipation of the next
	release.

	* AUTHORS: *Finally* put something in here.

1999-04-06 14:51  mcoletti

	* sdts++/Makefile, sdts++/builder/sb_Accessor.cpp,
	sdts++/builder/sb_Iref.cpp, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Rsdf.cpp, sdts++/builder/sb_Stat.cpp: Applied
	Jamie's patches.

1999-04-05 17:30  mcoletti

	* sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Cats.cpp,
	sdts++/builder/sb_Ddom.cpp, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Dq.cpp, sdts++/builder/sb_Rsdf.cpp: Ripped out
	broken checks.	Thanks to Jamie for pointing this out.

1999-04-05 15:21  mcoletti

	* NEWS, TODO, contrib/mksdts/Makefile.in,
	contrib/prsdts/prsdts.cpp, sdts++/Makefile, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.am, sdts++/builder/Makefile.in,
	sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Accessor.h,
	sdts++/builder/sb_Rsdf.cpp, sdts++/builder/sb_Rsdf.h,
	sdts++/container/Makefile, sdts++/io/FormatParser.y,
	sdts++/io/Makefile, sdts++/io/formatparser_tab.c,
	sdts++/io/sio_8211FieldFormat.cpp, sdts++/io/sio_8211FieldFormat.h,
	sdts++/io/sio_Reader.cpp, sdts++/io/sio_Reader.h,
	tests/Makefile.in, tests/sio_ReadWrite_t.cpp: 
	* s/converter_dictionary/sio_8211_converter_dictionary/
	
	  This should eliminate any possibility of a global namespace
	collision.
	
	* builder headers now go to proper location

1999-04-05 13:34  mcoletti

	* NEWS: Added preB notes.

	* configure.in: preB

1999-04-02 18:58  mcoletti

	* sdts++/builder/sb_Accessor.cpp: Stomped some debugging
	information.

1999-04-02 18:37  mcoletti

	* sdts++/Makefile, sdts++/builder/Makefile,
	sdts++/container/Makefile, sdts++/io/Makefile,
	sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_8211DirEntry.h, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_8211Record.h, sdts++/io/sio_Reader.cpp: Fixed all
	many of copy and assignment problems that boiled down to not
	resetting the forward pointing directory links.  The sb_Accessor
	appears to now work\!

1999-04-01 21:18  mcoletti

	* contrib/prsdts/prsdts.cpp, contrib/pr8211/pr8211.cpp: Now whines
	if there's bad data (at least in the leader) and bails with exit
	code one.

	* sdts++/Makefile, sdts++/Makefile.in,
	sdts++/io/sio_8211DDRLeader.cpp, sdts++/io/sio_8211DDRLeader.h,
	sdts++/io/sio_8211DRLeader.cpp, sdts++/io/sio_8211Leader.cpp,
	sdts++/io/sio_8211Leader.h: Added 8211 leader sanity checking such
	that I now intentionally wedge the input stream if the read in
	leader is bogus in any way.

	* NEWS, configure.in: Cut new version that has a little more robust
	error checking.

1999-03-31 10:13  mcoletti

	* sdts++/io/sio_8211Field.cpp: The default ctor wasn't properly
	initializing the data length to zero.

	* tests/sio_8211Field_t.cpp: Tests reflect change in
	sio_8211Field::getDataLength() semantics where the field length is
	now orthogonal to the amount of data filling it.

1999-03-31 09:41  mcoletti

	* tests/sio_8211DR_t.cpp: The only difference between the two field
	areas should be a field terminator; I now check for that.

1999-03-31 09:10  mcoletti

	* contrib/mksdts/Makefile.in, sdts++/Makefile.in,
	sdts++/builder/sb_Accessor.cpp, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_Reader.cpp, tests/Makefile.in, tests/sh_Accessor_t,
	tests/sh_ReadWrite_t: made some copy ctor fixes

1999-03-31 08:45  mcoletti

	* contrib/mksdts/Makefile.in, doc/sdts++.texi, sdts++/Makefile,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.in, sdts++/container/Makefile,
	sdts++/io/Makefile, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_8211Field.cpp, sdts++/io/sio_8211Field.h,
	tests/Makefile.in, tests/sio_8211DDR_t.cpp, tests/sio_8211_t.cpp:
	Fixed bug whereby an embedded field terminator in a binary stream
	would abnormally terminate read.  Added credit for Frank W.'s help.

1999-03-24 20:27  mcoletti

	* tests/sio_ReadWrite_t.cpp: Fixed such that it took proper command
	line arguments w/o having to specify -i and -o for input and output
	files respectively.

1999-03-23 23:23  mcoletti

	* contrib/mksdts/Makefile.in: Forgot to add this file to the
	repository.

	* contrib/mksdts/Makefile.am: Added parser.h to the distribution
	tar file.

1999-03-23 21:57  mcoletti

	* sdts++/builder/Makefile.am: Fixed cut-n-paste error caught by 
	Frank Warmerdam <warmerda@home.com>.

1999-03-23 19:56  mcoletti

	* BUGS, NEWS, TODO: updated documentation

1999-03-16 20:34  mcoletti

	* tests/sio_8211Field_t.cpp: Compensated for changes in the
	sio_8211Field's interface.  Now works.

	* sdts++/io/sio_8211Field.cpp: 1) The ctor that takes a size
	argument now calls vector::reserve instead of using the vector ctor
	that also takes a size argument.  That is, we do want to insure
	that we have sufficient allocated memory up front for the field
	data, but we also still want to report that the data contents are
	empty.
	
	2) getVariableSubfield now takes vector<char>& argument instead of
	a string.  This is to emphasize to the user that this isn't a
	string, but rather is a container of raw data.

	* sdts++/io/sio_8211DDRField.cpp: Now uses vector<char> instead of
	string due to interface change in sio_8211Field.

	* sdts++/io/sio_8211Field.h: 1) Added comment to getDataLength()
	indicating that this information may now also be directly garnered
	from the vector itself;
	
	2) getVariableSubfield() now uses a vector<char> instead of a
	string to emphasize that we're dealing with raw binary data and not
	necessarily a human readable string.

1999-03-16 06:56  mcoletti

	* tests/sio_8211DDR_t.cpp: Now correctly compensate for the fact
	that input and output DDR's can have the same semantic content but
	differ by whether or not they have field terminators.  That is, an
	input 8211 field is stripped of its field and unit terminators as
	they take up unnecessary storage.  However, if an 8211 field is to
	be written, then naturally these terminators are important to have.
	 So, the comparison between two fields that were built via input or
	output had to take that into consideration.

	* sdts++/io/sio_8211DDR.cpp: Added additional check for badness in
	stream for streamExtract(); if input stream hosed, then we
	immediately return.

	* sdts++/io/sio_8211Field.cpp: Fixed stream extract such that it no
	longer presumes that the data buffer is set at the correct size if
	it's length is greater than zero.

1999-03-12 22:14  mcoletti

	* tests/sio_8211DDRField_t.cpp: Fixed check at end where the only
	difference between a raw data buffer and an sio_Buffer returned
	from a sio_8211Field was a field terminator.

	* sdts++/io/sio_8211Field.cpp: In getVariableSubfield, added
	increment to startPos to skip unit terminators.

1999-03-11 23:06  mcoletti

	* configure.in, contrib/mksdts/Makefile.am,
	contrib/mksdts/Makefile.in, contrib/mkstat/Makefile.am,
	contrib/pr8211/pr8211.cpp, sdts++/Makefile, sdts++/Makefile.in,
	sdts++/builder/Makefile, sdts++/builder/Makefile.am,
	sdts++/builder/Makefile.in, sdts++/builder/sb_Accessor.cpp,
	sdts++/container/Makefile, sdts++/container/Makefile.in,
	sdts++/io/Makefile, sdts++/io/Makefile.in,
	sdts++/io/sio_8211Field.cpp, sdts++/io/sio_8211Field.h,
	sdts++/io/sio_Buffer.cpp, sdts++/io/sio_Buffer.h,
	tests/Makefile.in, tests/container_t.cpp, tests/sc_Field_t.cpp,
	tests/sio_8211DDRField_t.cpp, tests/sio_8211DDR_t.cpp,
	tests/sio_8211DR_t.cpp, tests/sio_8211Field_t.cpp,
	tests/sio_8211_t.cpp, tests/sio_Buffer_t.cpp: 
	- propogated vector<char> changes to tests
	
	- fixed INCLUDES macro for mkstat and mksdts
	
	Notes:
	
		Seven tests fail.  Will fix those next.

1999-03-11 22:32  mcoletti

	* tests/sb_arc_t.cpp, tests/sb_cell_t.cpp, tests/sb_ddsh_t.cpp,
	tests/sb_iden_t.cpp, tests/sb_iref_t.cpp, tests/sb_line_t.cpp,
	tests/sb_xref_t.cpp: I forgot to add _all_ of these test drivers. 
	Argh\!

1999-03-11 14:07  mcoletti

	* sdts++/Makefile.am: Corrected SOURCES line to be compliant with
	automake naming convention.

1999-03-10 18:03  mcoletti

	* tests/container_t.cpp: Forgot to add this test driver.

1999-03-09 19:45  mcoletti

	* sdts++/Makefile, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_8211Field.cpp, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_Buffer.cpp, sdts++/io/sio_Buffer.h,
	sdts++/io/sio_Reader.cpp: A LOT of changes.
	
	Now use safer STL vector for raw data manipulation.  I also
	anticipate a speed-up; certainly the code is safer and a bit easier
	to maintain.
	
	Some of the test drivers are now broken.  Will fix now.

1999-03-06 00:35  mcoletti

	* contrib/mksdts/Makefile.in, sdts++/Makefile, sdts++/Makefile.in,
	sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Cell.cpp,
	sdts++/builder/sb_Cell.h, sdts++/builder/sb_Iden.cpp,
	sdts++/builder/sb_Iden.h, sdts++/builder/sb_Utils.cpp,
	sdts++/io/sio_8211DDR.cpp, sdts++/io/sio_8211DDR.h,
	sdts++/io/sio_8211DDRField.cpp, sdts++/io/sio_8211DDRField.h,
	sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_8211DRLeader.cpp, sdts++/io/sio_8211DRLeader.h,
	sdts++/io/sio_8211DirEntry.cpp, sdts++/io/sio_8211DirEntry.h,
	sdts++/io/sio_8211Field.cpp, sdts++/io/sio_8211Field.h,
	sdts++/io/sio_8211FieldFormat.cpp, sdts++/io/sio_8211Leader.cpp,
	sdts++/io/sio_8211Leader.h, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_8211Record.h, sdts++/io/sio_8211SubfieldFormat.cpp,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h, tests/HY01IDEN.DDF, tests/Makefile.am,
	tests/Makefile.in, tests/abcdcatd.ddf, tests/abcdiden.ddf,
	tests/sb_accessor_t.cpp, tests/sh_8211_t, tests/sh_Accessor_t,
	tests/sh_ReadWrite_t, tests/sio_ReadWrite_t.cpp: Intermediate
	check-in; things in transient state.

1999-02-26 22:50  mcoletti

	* sdts++/Makefile, sdts++/builder/sb_Cell.cpp,
	sdts++/builder/sb_Cell.h: 
	Moved templated functions to header for sb_Cell.  Also moved a few
	other things from the implemenation file to fix compilation
	problems.

1999-02-26 20:21  mcoletti

	* sdts++/Makefile, sdts++/builder/sb_Accessor.cpp,
	sdts++/builder/sb_Accessor.h, sdts++/builder/sb_Cell.cpp: 
	sb_Accessor :
	
		    - now takes converter_dictionary so that modules that
	have
		      dependant binary subfields can have those properly
		      interpreted
	
	sb_Cell :
	
		    - _should_ work; at least it compiles!

1999-02-26 18:51  mcoletti

	* contrib/mksdts/Makefile.in, sdts++/Makefile, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.am, sdts++/builder/Makefile.in,
	sdts++/builder/sb_Cell.cpp, sdts++/builder/sb_Cell.h,
	sdts++/builder/sb_Ddom.cpp, tests/Makefile.in: Checkpoint commit
	for new sb_Cell

1999-02-25 20:05  mcoletti

	* sdts++/Makefile, sdts++/builder/sb_Ddom.cpp,
	sdts++/builder/sb_Ddom.h: Finally have a compilable, but untested,
	version of sb_Ddom.

1999-02-20 01:24  mcoletti

	* sdts++/builder/Makefile.am, sdts++/builder/ddom.def: Forgot to
	add these files to CVS.

1999-02-19 21:58  mcoletti

	* sdts++/Makefile, sdts++/builder/sb_Ddom.cpp,
	sdts++/builder/sb_Ddom.h: Starting work to make sb_Dddom's DVAL
	multivalued like it should.  Not finished with this yet.

1999-02-19 19:48  mcoletti

	* contrib/mksdts/Makefile.in, sdts++/Makefile, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.in, sdts++/builder/mkheader.pl,
	sdts++/builder/mkimp.pl, sdts++/builder/sb_Ddom.cpp,
	sdts++/builder/sb_Ddom.h, tests/Makefile.in: Added sb_Dddom to the
	builder family.

1999-02-19 18:59  mcoletti

	* sdts++/Makefile, sdts++/builder/sb_Accessor.cpp,
	sdts++/builder/sb_Accessor.h, sdts++/builder/sb_Iden.h,
	sdts++/builder/sb_Module.h: First clean compile of the new
	sb_Accessor stuff.

1999-02-18 22:34  mcoletti

	* sdts++/builder/sb_Accessor.cpp, sdts++/builder/sb_Accessor.h:
	Added sb_Accessor, which is a convenience class for getting module
	records from information found in a given CATD module.

1999-02-18 20:17  mcoletti

	* sdts++/Makefile, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h, sdts++/io/sio_Writer.cpp: Intermediate
	commit; compilable checkpoint for sb_Accessor class.

1999-02-16 23:19  mcoletti

	* sdts++/Makefile, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_8211DR.h, sdts++/io/sio_8211DRLeader.cpp,
	sdts++/io/sio_8211DRLeader.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h: sio_8211ForwardIterator now has hidden
	implementation mechanism.  It also now has copy ctors and an
	assignment operator.
	
	Similarly, sio_8211DR and sio_8211DRLeader have copy ctors and
	assignment operators.

1999-02-16 20:19  mcoletti

	* contrib/mksdts/Makefile.in, sdts++/Makefile, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.in, sdts++/io/sio_8211Converter.cpp,
	sdts++/io/sio_8211Converter.h, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_8211Field.cpp, sdts++/io/sio_8211Field.h,
	sdts++/io/sio_Buffer.cpp, sdts++/io/sio_Buffer.h,
	sdts++/io/sio_Reader.cpp, sdts++/io/sio_Reader.h,
	tests/Makefile.in: 
	Nuked superfluous ABC classes for sio_Reader.
	
	Added copy ctor for sio_8211ForwardIterator and sio_8211Reader.
	
	Added sio_8211Reader::attach().
	
	Old tests seem to work ok.
	
	Notes:
	
		Need to synch tests with sio_Reader changes.

1999-02-11 22:08  mcoletti

	* configure.in, contrib/Makefile.am, contrib/mksdts/Makefile.in,
	contrib/mkstat/Makefile.am, contrib/mkstat/emit.cpp,
	contrib/mkstat/emit.h, contrib/mkstat/filename.cpp,
	contrib/mkstat/filename.h, contrib/mkstat/mkstat.1,
	contrib/mkstat/mkstat.cpp, sdts++/Makefile, sdts++/Makefile.in,
	sdts++/builder/Makefile, sdts++/builder/Makefile.in,
	sdts++/container/Makefile, sdts++/container/Makefile.in,
	sdts++/io/Makefile, sdts++/io/Makefile.in, tests/Makefile.in: Added
	mkstat to /contrib

1999-02-11 20:21  mcoletti

	* doc/MANUAL: Old manual now in texinfo form.

	* configure.in, contrib/Makefile.am, contrib/mksdts/Makefile.am,
	contrib/mksdts/Makefile.in, sdts++/Makefile, sdts++/Makefile.in,
	tests/Makefile.in: Moved mksdts to /contrib.

1999-02-11 17:47  mcoletti

	* Makefile.am, configure.in, contrib/Makefile.am,
	contrib/pr8211/Makefile.am, contrib/pr8211/pr8211.cpp,
	contrib/prsdts/Makefile.am, contrib/prsdts/prsdts.cpp,
	sdts++/Makefile, sdts++/Makefile.in, tests/Makefile.in: 
	Started /contrib directory, where sdts++ some applications will
	call home.
	
	Added:	       - pr8211, which dumps out detailed 8211 information 
	       - prsdts, which prints SDTS modules

1999-02-05 22:06  mcoletti

	* doc/sdts++.texi: Significant improvement in formatting.  Added a
	lot of function and variable name indices.

1999-02-05 19:26  mcoletti

	* doc/sdts++.texi: First version that compiles cleanly into info
	files.	Still needs a lot of format cleaning.

1999-02-05 18:15  mcoletti

	* doc/Makefile.am, doc/sdts++.texi: Added automake file; check
	pointing the documenation -- still getting texinfo errors.

1999-02-04 21:54  mcoletti

	* configure.in, doc/sdts++.texi, sdts++/Makefile,
	sdts++/Makefile.in, tests/Makefile.am, tests/Makefile.in: Argh.  It
	would seem that a lot of my automake changes didn't make it.

1999-02-04 16:54  mcoletti

	* tests/Makefile.am, tests/Makefile.in, tests/sc_Field_t.cpp,
	tests/sc_MultiTypeValue_t.cpp, tests/sc_Subfield_t.cpp,
	tests/sh_8211_t, tests/sh_ReadWrite_t, tests/sh_Writer_t,
	tests/sio_8211DDRField_t.cpp, tests/sio_8211DDRLeader_t.cpp,
	tests/sio_8211DDR_t.cpp, tests/sio_8211DRLeader_t.cpp,
	tests/sio_8211DR_t.cpp, tests/sio_8211DirEntry_t.cpp,
	tests/sio_8211FieldFormat_t.cpp, tests/sio_8211Field_t.cpp,
	tests/sio_8211SubfieldFormat_t.cpp, tests/sio_Buffer_t.cpp,
	tests/sio_Error_t.cpp, tests/sio_Writer_t.cpp: Now seems to be
	automake friendly.  Most of the tests work, though I've had to set
	some aside that need some work.  (E.g., Chad's old test stuff.)

1999-02-04 14:41  mcoletti

	* contrib/mksdts/aclocal.m4, contrib/mksdts/lexer.ll,
	contrib/mksdts/parser.yy: Yet more automake stuff.

1999-02-04 13:34  mcoletti

	* contrib/mksdts/Makefile.am, contrib/mksdts/Makefile.in: Forgot to
	add the automake file.	Now also installs the man page.

1999-02-04 13:29  mcoletti

	* contrib/mksdts/Makefile.in, contrib/mksdts/configure.in: First
	cut at making automake friendly.

1999-02-03 18:31  mcoletti

	* tests/Makefile.in, tests/cntr_tests.cpp, tests/converttest.cpp,
	tests/converttest.h, tests/sc_Field_t.cpp,
	tests/sc_MultiTypeValue_t.cpp, tests/sc_Subfield_t.cpp,
	tests/sio_8211DDRField_t.cpp, tests/sio_8211DDRLeader_t.cpp,
	tests/sio_8211DDR_t.cpp, tests/sio_8211DRLeader_t.cpp,
	tests/sio_8211DR_t.cpp, tests/sio_8211DirEntry_t.cpp,
	tests/sio_8211FieldFormat_t.cpp, tests/sio_8211Field_t.cpp,
	tests/sio_8211SubfieldFormat_t.cpp, tests/sio_8211_t.cpp,
	tests/sio_Buffer_t.cpp, tests/sio_Error_t.cpp,
	tests/sio_ReadWrite_t.cpp, tests/sio_Writer_t.cpp,
	tests/t_sb_arc.cpp, tests/t_sb_ddsh.cpp, tests/t_sb_iden.cpp,
	tests/t_sb_iref.cpp, tests/t_sb_line.cpp, tests/t_sb_xref.cpp: This
	is a first cut at making the checks automake friendly.	All seem to
	work except for those that need command-line arguments.

	* tests/Makefile.in, tests/sc_Field_t.cpp,
	tests/sc_MultiTypeValue_t.cpp, tests/sc_Subfield_t.cpp,
	tests/sio_8211DDRField_t.cpp, tests/sio_8211DDRLeader_t.cpp: First
	cut at making the tests automake friendly.

1999-02-03 18:22  mcoletti

	* Makefile.am, configure.in, sdts++/Makefile, sdts++/Makefile.in,
	sdts++/builder/Makefile, sdts++/container/Makefile,
	sdts++/container/Makefile.am, sdts++/container/Makefile.in,
	sdts++/io/Makefile, sdts++/io/Makefile.am, sdts++/io/Makefile.in,
	sdts++/io/sio_8211Converter.cpp, sdts++/io/sio_8211Converter.h,
	sdts++/io/sio_8211DDR.cpp, sdts++/io/sio_8211DDR.h,
	sdts++/io/sio_8211DDRField.cpp, sdts++/io/sio_8211DDRField.h,
	sdts++/io/sio_8211DDRLeader.cpp, sdts++/io/sio_8211DDRLeader.h,
	sdts++/io/sio_8211DR.cpp, sdts++/io/sio_8211DR.h,
	sdts++/io/sio_8211DRLeader.cpp, sdts++/io/sio_8211DRLeader.h,
	sdts++/io/sio_8211DirEntry.cpp, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_8211Field.h, sdts++/io/sio_8211FieldArea.cpp,
	sdts++/io/sio_8211FieldArea.h, sdts++/io/sio_8211FieldFormat.cpp,
	sdts++/io/sio_8211FieldFormat.h, sdts++/io/sio_8211Leader.cpp,
	sdts++/io/sio_8211Record.cpp, sdts++/io/sio_8211Record.h,
	sdts++/io/sio_8211SubfieldFormat.cpp, sdts++/io/sio_8211Utils.cpp,
	sdts++/io/sio_Buffer.cpp, sdts++/io/sio_Converter.cpp,
	sdts++/io/sio_Converter.h, sdts++/io/sio_Error.cpp,
	sdts++/io/sio_Reader.cpp, sdts++/io/sio_Reader.h,
	sdts++/io/sio_Utils.cpp, sdts++/io/sio_Writer.cpp,
	sdts++/io/sio_Writer.h: First cut at making the tests automake
	friendly.

1999-02-02 18:20  mcoletti

	* Makefile.am, sdts++/Makefile, sdts++/Makefile.in,
	sdts++/builder/Makefile, sdts++/builder/Makefile.in,
	sdts++/builder/sb_At.cpp, sdts++/builder/sb_At.h,
	sdts++/builder/sb_Catd.cpp, sdts++/builder/sb_Catd.h,
	sdts++/builder/sb_Cats.cpp, sdts++/builder/sb_Cats.h,
	sdts++/builder/sb_Ddsh.cpp, sdts++/builder/sb_Ddsh.h,
	sdts++/builder/sb_Dq.cpp, sdts++/builder/sb_Dq.h,
	sdts++/builder/sb_ForeignID.cpp, sdts++/builder/sb_Iden.cpp,
	sdts++/builder/sb_Iden.h, sdts++/builder/sb_Iref.cpp,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Ldef.h, sdts++/builder/sb_Module.cpp,
	sdts++/builder/sb_Module.h, sdts++/builder/sb_Rsdf.cpp,
	sdts++/builder/sb_Rsdf.h, sdts++/builder/sb_Stat.cpp,
	sdts++/builder/sb_Stat.h, sdts++/builder/sb_Utils.cpp,
	sdts++/builder/sb_Utils.h, sdts++/builder/sb_Xref.cpp,
	sdts++/builder/sb_Xref.h: source includes now use sdts++ canonical
	path names

1999-02-01 14:37  mcoletti

	* configure.in, sdts++/Makefile, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/builder/Makefile,
	sdts++/builder/Makefile.in, sdts++/container/Makefile,
	sdts++/container/Makefile.am, sdts++/container/Makefile.in,
	sdts++/io/Makefile, sdts++/io/Makefile.am, sdts++/io/Makefile.in: 
		- builder added
	
		- now include generated makefiles [1]
	
	Notes:
	
		[1] this in anticipation of read-only CVS access so that
		subscribers won't have to depend on autoconf or automake to
		generate these files

1999-02-01 13:58  mcoletti

	* configure.in, sdts++/Makefile.am, sdts++/Makefile.in,
	sdts++/container/Makefile.in, sdts++/io/Makefile.am,
	sdts++/io/Makefile.in: 
	Added io stuff.
	
	Fixed sdts++ naming problems with automake.  (By hacking on
	automake. *grr*)

1999-02-01 13:13  mcoletti

	* Makefile.am, configure.in, sdts++/Makefile.am,
	sdts++/Makefile.in, sdts++/container/Makefile.am,
	sdts++/container/Makefile.in: 
	Now properly creates:
	
	    ${prefix}/lib/libsdts++.a
	    ${prefix}/include/container/*.{h,cpp}
	
	Notes:
	
	  Automake complains about the name "libsdts++", but still
	generates
	  the proper makefile.in template.
	
	  Will now add the io and builder subdirectories.

1999-01-31 23:15  mcoletti

	* BUGS, Makefile.am, NEWS, README, TODO, configure.in, install-sh,
	AUTHORS, ChangeLog, doc/MANUAL, doc/SDTS++FAQ, doc/sdts.ood,
	sdts++/Makefile.am, sdts++/Makefile.in, sdts++/builder/Makefile.in,
	sdts++/builder/at.def, sdts++/builder/catd.def,
	sdts++/builder/cats.def, sdts++/builder/ddsh.def,
	sdts++/builder/iden.def, sdts++/builder/mkheader.pl,
	sdts++/builder/mkimp.pl, sdts++/builder/sb_At.cpp,
	sdts++/builder/sb_At.h, sdts++/builder/sb_Catd.cpp,
	sdts++/builder/sb_Catd.h, sdts++/builder/sb_Cats.cpp,
	sdts++/builder/sb_Cats.h, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Ddsh.h, sdts++/builder/sb_Dq.cpp,
	sdts++/builder/sb_Dq.h, sdts++/builder/sb_ForeignID.cpp,
	sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_Iden.cpp,
	sdts++/builder/sb_Iden.h, sdts++/builder/sb_Iref.cpp,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Ldef.h, sdts++/builder/sb_Module.cpp,
	sdts++/builder/sb_Module.h, sdts++/builder/sb_Rsdf.cpp,
	sdts++/builder/sb_Rsdf.h, sdts++/builder/sb_Stat.cpp,
	sdts++/builder/sb_Stat.h, sdts++/builder/sb_Utils.cpp,
	sdts++/builder/sb_Utils.h, sdts++/builder/sb_Xref.cpp,
	sdts++/builder/sb_Xref.h, sdts++/builder/stat.def,
	sdts++/container/Makefile.am, sdts++/container/Makefile.in,
	sdts++/container/fixheader.pl, sdts++/container/sc_Field.cpp,
	sdts++/container/sc_Field.h, sdts++/container/sc_Module.cpp,
	sdts++/container/sc_Module.h,
	sdts++/container/sc_MultiTypeValue.cpp,
	sdts++/container/sc_MultiTypeValue.h,
	sdts++/container/sc_Record.cpp, sdts++/container/sc_Record.h,
	sdts++/container/sc_Subfield.cpp, sdts++/container/sc_Subfield.h,
	sdts++/io/FormatLexer.l, sdts++/io/FormatParser.y,
	sdts++/io/Makefile.in, sdts++/io/bison.simple,
	sdts++/io/formatparser_tab.c, sdts++/io/formatparser_tab.h,
	sdts++/io/lex.sio_8211_yy.c, sdts++/io/sio_8211Converter.cpp,
	sdts++/io/sio_8211Converter.h, sdts++/io/sio_8211DDR.cpp,
	sdts++/io/sio_8211DDR.h, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_8211DDRField.h, sdts++/io/sio_8211DDRLeader.cpp,
	sdts++/io/sio_8211DDRLeader.h, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_8211DR.h, sdts++/io/sio_8211DRLeader.cpp,
	sdts++/io/sio_8211DRLeader.h, sdts++/io/sio_8211DirEntry.cpp,
	sdts++/io/sio_8211DirEntry.h, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_8211Field.h, sdts++/io/sio_8211FieldArea.cpp,
	sdts++/io/sio_8211FieldArea.h, sdts++/io/sio_8211FieldFormat.cpp,
	sdts++/io/sio_8211FieldFormat.h, sdts++/io/sio_8211Leader.cpp,
	sdts++/io/sio_8211Leader.h, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_8211Record.h, sdts++/io/sio_8211SubfieldFormat.cpp,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_8211Utils.cpp,
	sdts++/io/sio_8211Utils.h, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h, sdts++/io/sio_Converter.cpp,
	sdts++/io/sio_Converter.h, sdts++/io/sio_Error.cpp,
	sdts++/io/sio_Error.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h, sdts++/io/sio_Utils.cpp,
	sdts++/io/sio_Utils.h, sdts++/io/sio_Writer.cpp,
	sdts++/io/sio_Writer.h, sdts++/io/y.tab.h, tests/Makefile.in,
	tests/cntr_tests.cpp, tests/converttest.cpp, tests/mktest.pl,
	tests/sc_Field_t.cpp, tests/t_sb_arc.cpp, tests/t_sb_ddsh.cpp,
	tests/t_sb_iden.cpp, tests/t_sb_iref.cpp, tests/t_sb_line.cpp,
	tests/t_sb_xref.cpp, tests/HY01IDEN.DDF, tests/converttest.h,
	tests/sc_MultiTypeValue_t.cpp, tests/sc_Subfield_t.cpp,
	tests/sio_8211DDRField_t.cpp, tests/sio_8211DDRLeader_t.cpp,
	tests/sio_8211DDR_t.cpp, tests/sio_8211DRLeader_t.cpp,
	tests/sio_8211DR_t.cpp, tests/sio_8211DirEntry_t.cpp,
	tests/sio_8211FieldFormat_t.cpp, tests/sio_8211Field_t.cpp,
	tests/sio_8211SubfieldFormat_t.cpp, tests/sio_8211_t.cpp,
	tests/sio_Buffer_t.cpp, tests/sio_Error_t.cpp,
	tests/sio_ReadWrite_t.cpp, tests/sio_Writer_t.cpp: branches: 
	1.1.1; Initial revision

	* BUGS, Makefile.am, NEWS, README, TODO, configure.in, install-sh,
	AUTHORS, ChangeLog, doc/MANUAL, doc/SDTS++FAQ, doc/sdts.ood,
	sdts++/Makefile.am, sdts++/Makefile.in, sdts++/builder/Makefile.in,
	sdts++/builder/at.def, sdts++/builder/catd.def,
	sdts++/builder/cats.def, sdts++/builder/ddsh.def,
	sdts++/builder/iden.def, sdts++/builder/mkheader.pl,
	sdts++/builder/mkimp.pl, sdts++/builder/sb_At.cpp,
	sdts++/builder/sb_At.h, sdts++/builder/sb_Catd.cpp,
	sdts++/builder/sb_Catd.h, sdts++/builder/sb_Cats.cpp,
	sdts++/builder/sb_Cats.h, sdts++/builder/sb_Ddsh.cpp,
	sdts++/builder/sb_Ddsh.h, sdts++/builder/sb_Dq.cpp,
	sdts++/builder/sb_Dq.h, sdts++/builder/sb_ForeignID.cpp,
	sdts++/builder/sb_ForeignID.h, sdts++/builder/sb_Iden.cpp,
	sdts++/builder/sb_Iden.h, sdts++/builder/sb_Iref.cpp,
	sdts++/builder/sb_Iref.h, sdts++/builder/sb_Ldef.cpp,
	sdts++/builder/sb_Ldef.h, sdts++/builder/sb_Module.cpp,
	sdts++/builder/sb_Module.h, sdts++/builder/sb_Rsdf.cpp,
	sdts++/builder/sb_Rsdf.h, sdts++/builder/sb_Stat.cpp,
	sdts++/builder/sb_Stat.h, sdts++/builder/sb_Utils.cpp,
	sdts++/builder/sb_Utils.h, sdts++/builder/sb_Xref.cpp,
	sdts++/builder/sb_Xref.h, sdts++/builder/stat.def,
	sdts++/container/Makefile.am, sdts++/container/Makefile.in,
	sdts++/container/fixheader.pl, sdts++/container/sc_Field.cpp,
	sdts++/container/sc_Field.h, sdts++/container/sc_Module.cpp,
	sdts++/container/sc_Module.h,
	sdts++/container/sc_MultiTypeValue.cpp,
	sdts++/container/sc_MultiTypeValue.h,
	sdts++/container/sc_Record.cpp, sdts++/container/sc_Record.h,
	sdts++/container/sc_Subfield.cpp, sdts++/container/sc_Subfield.h,
	sdts++/io/FormatLexer.l, sdts++/io/FormatParser.y,
	sdts++/io/Makefile.in, sdts++/io/bison.simple,
	sdts++/io/formatparser_tab.c, sdts++/io/formatparser_tab.h,
	sdts++/io/lex.sio_8211_yy.c, sdts++/io/sio_8211Converter.cpp,
	sdts++/io/sio_8211Converter.h, sdts++/io/sio_8211DDR.cpp,
	sdts++/io/sio_8211DDR.h, sdts++/io/sio_8211DDRField.cpp,
	sdts++/io/sio_8211DDRField.h, sdts++/io/sio_8211DDRLeader.cpp,
	sdts++/io/sio_8211DDRLeader.h, sdts++/io/sio_8211DR.cpp,
	sdts++/io/sio_8211DR.h, sdts++/io/sio_8211DRLeader.cpp,
	sdts++/io/sio_8211DRLeader.h, sdts++/io/sio_8211DirEntry.cpp,
	sdts++/io/sio_8211DirEntry.h, sdts++/io/sio_8211Directory.cpp,
	sdts++/io/sio_8211Directory.h, sdts++/io/sio_8211Field.cpp,
	sdts++/io/sio_8211Field.h, sdts++/io/sio_8211FieldArea.cpp,
	sdts++/io/sio_8211FieldArea.h, sdts++/io/sio_8211FieldFormat.cpp,
	sdts++/io/sio_8211FieldFormat.h, sdts++/io/sio_8211Leader.cpp,
	sdts++/io/sio_8211Leader.h, sdts++/io/sio_8211Record.cpp,
	sdts++/io/sio_8211Record.h, sdts++/io/sio_8211SubfieldFormat.cpp,
	sdts++/io/sio_8211SubfieldFormat.h, sdts++/io/sio_8211Utils.cpp,
	sdts++/io/sio_8211Utils.h, sdts++/io/sio_Buffer.cpp,
	sdts++/io/sio_Buffer.h, sdts++/io/sio_Converter.cpp,
	sdts++/io/sio_Converter.h, sdts++/io/sio_Error.cpp,
	sdts++/io/sio_Error.h, sdts++/io/sio_Reader.cpp,
	sdts++/io/sio_Reader.h, sdts++/io/sio_Utils.cpp,
	sdts++/io/sio_Utils.h, sdts++/io/sio_Writer.cpp,
	sdts++/io/sio_Writer.h, sdts++/io/y.tab.h, tests/Makefile.in,
	tests/cntr_tests.cpp, tests/converttest.cpp, tests/mktest.pl,
	tests/sc_Field_t.cpp, tests/t_sb_arc.cpp, tests/t_sb_ddsh.cpp,
	tests/t_sb_iden.cpp, tests/t_sb_iref.cpp, tests/t_sb_line.cpp,
	tests/t_sb_xref.cpp, tests/HY01IDEN.DDF, tests/converttest.h,
	tests/sc_MultiTypeValue_t.cpp, tests/sc_Subfield_t.cpp,
	tests/sio_8211DDRField_t.cpp, tests/sio_8211DDRLeader_t.cpp,
	tests/sio_8211DDR_t.cpp, tests/sio_8211DRLeader_t.cpp,
	tests/sio_8211DR_t.cpp, tests/sio_8211DirEntry_t.cpp,
	tests/sio_8211FieldFormat_t.cpp, tests/sio_8211Field_t.cpp,
	tests/sio_8211SubfieldFormat_t.cpp, tests/sio_8211_t.cpp,
	tests/sio_Buffer_t.cpp, tests/sio_Error_t.cpp,
	tests/sio_ReadWrite_t.cpp, tests/sio_Writer_t.cpp: Initial cut at
	complete reorganization of sdts++.
	
	1. all files are now in proper directory
	
	2. GNU standard files now included
	
	3. automake generated makefiles now build container stuff
	
	Notes:
	
	- need to fix target install names
	
	- need to add io
	
	- need to add builder
	
	- need to add contrib/*
	
	- need to add tests/*

1999-01-22 21:42  mcoletti

	* contrib/mksdts/COPYING, contrib/mksdts/INSTALL,
	contrib/mksdts/Makefile.in, contrib/mksdts/NEWS,
	contrib/mksdts/configure.in, contrib/mksdts/lexer.l,
	contrib/mksdts/missing, contrib/mksdts/mkinstalldirs,
	contrib/mksdts/parser.y: now using automake

1998-11-04 20:39  mcoletti

	* contrib/mksdts/parser.y: Minor code cleanup.

1998-11-02 17:28  mcoletti

	* contrib/mksdts/parser.y: 
	Oops.  Just noticed that I wasn't checking the return value of
	sio_Writer::put().  Also, consolidated verbose messages into a
	single (templated) function call.

1998-11-02 17:16  mcoletti

	* contrib/mksdts/parser.y: 
	Fixed bug whereby an 'R' subfield that was assigned from an integer
	would use sc_Subfield::setI() instead of sc_Subfield::setR().  Now
	it's a little more intellgent about using the proper subfield type
	when it parses an integer.

1998-10-22 18:11  mcoletti

	* contrib/mksdts/lexer.l: 
	Now handles scientific notation.

1998-10-22 18:04  mcoletti

	* contrib/mksdts/Makefile.in: need to remove executable when
	cleaning up

1998-10-08 16:20  mcoletti

	* contrib/mksdts/Makefile.in, contrib/mksdts/README: Bumped to
	version 1.0

1998-08-25 22:45  mcoletti

	* contrib/mksdts/mksdts.1, contrib/mksdts/parser.y: 
	mksdts.1 :
	
		- added text describing proper way to add null subfields
	
	parser.y :
	
		- added empty subfield text that's written out when verbose
	flag set

1998-08-25 21:52  mcoletti

	* contrib/mksdts/Makefile.in, contrib/mksdts/configure.in,
	contrib/mksdts/parser.y: 
	- Fixed stooopid IRIX getopt() problem
	
	- Attempt to add null fields; still doesn't quite work.

1998-07-30 03:53  mcoletti

	* contrib/mksdts/mksdts.1, contrib/mksdts/parser.y: 
	parser.y :
	
		- now reads from standard input if no SDL file specified
	
	mksdts.1 :
	
		- changed man page to reflect this change

1998-07-29 19:09  mcoletti

	* contrib/mksdts/mksdts.1: 
	Enhanced the MODN and RCID paragraph.

1998-07-21 18:55  mcoletti

	* contrib/mksdts/Makefile.in: Fixed install rule.

1998-06-03 15:17  client

	* contrib/mksdts/lexer.l: added iden string

1998-06-02 21:59  client

	* contrib/mksdts/README: small format change

1998-06-02 21:11  mcoletti

	* contrib/mksdts/lexer.l, contrib/mksdts/parser.y: lexer.l :
	
		- corrected bug where any integer larger than a single
	digit
		  wasn't handled correctly
	
	parser.y :
	
		- now emits numeric values
	
		- fixed bug where a field that happened to start with a
	MODN
		  subfield would confuse the parser if it wasn't the first
	field
		  int the schema
	
	BUGS:
	
		Has pathological behavior if a subfield is missing.  This
	is an sdts++
	problem.  Will fix now.

1998-05-30 00:42  mcoletti

	* contrib/mksdts/mksdts.1: Not all man programs are created equal
	it seems.  Escaping the # was really unnecessary it turns out. 
	Took out the escape and the DG man app liked it much better.

1998-05-30 00:23  mcoletti

	* contrib/mksdts/README: Added note of dependency on sdts++ in the
	README.

	* contrib/mksdts/foo.sdts: not needed

	* contrib/mksdts/Makefile.in: Added dist rule to make a zipped tar
	distribution file.

1998-05-30 00:04  mcoletti

	* contrib/mksdts/README: basic how to install

1998-05-29 23:58  mcoletti

	* contrib/mksdts/mksdts.1: first crack at a man page, complete with
	examples

1998-05-29 22:22  mcoletti

	* contrib/mksdts/lexer.l, contrib/mksdts/parser.y: First quasi
	functional version\!

1998-05-29 16:01  mcoletti

	* contrib/mksdts/parser.y: checkpoint version

1998-05-19 23:42  mcoletti

	* contrib/mksdts/lexer.l: Got rid of B, C, and BUI types.

	* contrib/mksdts/parser.y: Added converters and support for
	subfield formats.

1998-05-19 22:37  mcoletti

	* contrib/mksdts/foo.sdts, contrib/mksdts/lexer.l,
	contrib/mksdts/parser.y: - lexer now passes up integer, double, and
	string values to parser - parser now gets modules mnemonic - parser
	now builds field formats for each field definition - changed
	grammar to accomodate field names and tags

1998-05-19 21:39  mcoletti

	* contrib/mksdts/Makefile.in, contrib/mksdts/foo.sdts,
	contrib/mksdts/parser.y: First hooks into sdts++

1998-05-19 19:43  mcoletti

	* contrib/mksdts/configure.in: - checks for sdts++ library and
	whines if it's not found

1998-05-18 22:31  mcoletti

	* contrib/mksdts/Makefile.in, contrib/mksdts/foo.sdts,
	contrib/mksdts/lexer.l, contrib/mksdts/parser.y: parser and lexer
	syntax check work

1998-05-18 21:07  mcoletti

	* contrib/mksdts/Makefile.in, contrib/mksdts/configure.in,
	contrib/mksdts/foo.sdts, contrib/mksdts/install-sh,
	contrib/mksdts/lexer.l, contrib/mksdts/parser.y: branches:  1.1.1;
	Initial revision

	* contrib/mksdts/Makefile.in, contrib/mksdts/configure.in,
	contrib/mksdts/foo.sdts, contrib/mksdts/install-sh,
	contrib/mksdts/lexer.l, contrib/mksdts/parser.y: Utility for making
	SDTS modules from a file written in a special language.

