.TH MKSDTS 1
.SH NAME
mksdts \-   Make SDTS module files
.SH SYNOPSIS
.B mksdts
[-v] [-i SDL infile] -o outfile
.SH OPTIONS
.TP
.B \-v
Toggle on noisy output
.TP
.B \-i
The SDL file.  If none given, 
.I mksdts
will use standard input.

.TP
.B \-o
The ISO 8211 DDF file for the SDTS module.

.SH DESCRIPTION
.I  Mksdts
Converts an SDTS Definition Language (SDL) file to a corresponding SDTS
module file.

.SH SDTS Definition Language (SDL)
SDL is used to describe an SDTS module's fields and subfields.  It can
also be used to add data records to the module.

An SDL file has two parts, one to describe the data, and the other for 
delineating the data itself.  The next two sections describe each part,
in turn.

.SS Describing the module's contents
Before adding data records, you must specify the module's mnemonic (which
are used in the MODN subfields) and tell 
.I mksdts
about all the fields and their respective formats.

The
.I module
statement sets the module mnemonic that will be used in MODN subfields.
Its syntax is:
.PP
.nf
module MNEMONIC
.fi

The
.I field
statement describes an SDTS field and its respective subfields.  Its
syntax is:
.PP
.nf
field "long field name" MNEMONIC
{
   <one or more subfield descriptions>
}
.fi

Each subfield description is :
.PP
.nf
MNEMONIC : <a subfield type>
.fi

The following subfield types are supported:
.PP
.TP 
.B A
A string
.TP
.B I
An integer string
.TP
.B R
A real number string
.TP
.B S
A scaled real number string
.TP
.B BI8
An eight bit integer
.TP
.B BI16
A sixteen bit integer
.TP
.B BI24
A twenty-four bit integer
.TP
.B BI32
A thirty-two bit integer
.TP
.B BUI8
An eight bit unsigned integer
.TP
.B BUI16
A sixteen bit unsigned integer
.TP
.B BUI24
A twenty-four bit unsigned integer
.TP
.B BUI32
A thirty-two bit unsigned integer
.TP
.B BFP32
A thirty-two bit IEEE 754 floating point
.TP
.B BFP64
A sixty-four bit IEEE 754 floating point

.PP
Multiple subfield formats are separated by a ",".

For example, these statements describe an SDTS Data Dictionary/Definition 
module:

.nf
module DDDF

field "Data Dictionary/Definition" DDDF
{
   EORA : A, EALB : A, DFIN : A, AUTH : A
}
.fi

These statements describe an identification module's field and subfield
formats:

.nf
module IDEN

field "Identification" IDEN
{
   STID : A, STVS : A, DOCU : A, 
   PRID : A, PDOC : A, PRVS : A, 
   TITL : A, DAID : A, DAST : A, 
   MPDT : A, DCDT : A
}

field "Conformance" CONF
{
   FFYN : A, VGYN : A, GTYN : A, RCYN : A, 
   EXSP : I, FTLV : I, CDLV : I, NGDM : A
}
.fi

Please note that the MODN and RCID subfields need not be specified.
They are implicitly prepended to the first defined field; they are
then automatically added to each instance of that field in subsequent
records.  The RCID value is automatically incremented for each record.


.SS Adding module records
The 
.I record
statement is used to add module records.  Each 
.I record
will contain field and subfield data.  Its syntax is:

.nf
record { <field list> }
.fi

Each field in the record has the following syntax:

.nf
MNEMONIC { <list of subfields> }
.fi

Each subfield in a field is merely a comma delimited list of values; their
order matches that as described for the field in the corresponding
.I field
statement.

These values can be strings (contained inside quotes), or numbers.
Moreover, long strings can have embedded carriage returns.  Two
adjacent double quotes can describe an empty string.  Similarly, a
subfield can be left out of the subfield list to emit an empty subfield.

This is an example using the aforementioned DDDF field definition:

.nf
record
{
   DDDF
   {
     "ENT", "Lake", "Any standing body of inland water", "SDTS"
   }
}

record
{
    DDDF
    {
     "ENT", "", "Parcel of land set
 aside for a natural
 purpose", "USGS/NMD"
    }
}
.fi

Note that the second record has an empty EALB subfield and a DFIN field
that spans multiple lines -- the carriage returns are literally included
in the generated module file.

.SS Null subfields

Some SDTS subfields can have no value, or null values.  That is, they
take up space in a module record, but have no value.  You can specify
a null specify by leaving it out.  For example:

.nf
record
{
    DDDF
    {
     "ENT", , "Parcel of land set
 aside for a natural
 purpose", "USGS/NMD"
    }
}
.fi

Instead of having a null string (denoted by two adjacent double quotes),
the subfield is just left out.

.SS Miscellaneous
You can also use
.B #
to add comments.  Everything from a
.B #
to the end of the line is ignored.
.PP
Repeating fields can be added merely by adding more fields of the same
type to one record.  For example:

.nf
field "SPATIAL ADDRESS" SADR
{
        X : BI32, Y : BI32
}

record
{
     SADR
     {
       0xffbb,
       0x1234
     }
     SADR
     {
       0xabcd,
       0x4567
     }
     SADR
     {
       0x8899,
       0xbad1
     }
}
.fi

The three SADR fields are concatenated into the same field
description; i.e., they're "repeated".

.SH BUGS
.I Mksdts
does not support array fields.  Nor does it support dropped leaders
and directories.  These features may be added on an as needed basis.

If the last subfield is empty (i.e., null), then it will not get written
out to the DDF.

This hasn't been extensively tested.  Caveat emptor!


.SH WHO TO BLAME
.I Mksdts
was written by Mark Coletti on contract to the United States Geological
Survey from SAIC.  He can be reached at mcoletti@clark.net .
